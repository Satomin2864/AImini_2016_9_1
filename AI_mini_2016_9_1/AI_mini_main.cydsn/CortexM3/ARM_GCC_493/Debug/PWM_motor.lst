ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM_motor.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWM_motor_Enable,"ax",%progbits
  19              		.align	2
  20              		.global	PWM_motor_Enable
  21              		.thumb
  22              		.thumb_func
  23              		.type	PWM_motor_Enable, %function
  24              	PWM_motor_Enable:
  25              	.LFB2:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\PWM_motor.c"
   1:.\Generated_Source\PSoC5/PWM_motor.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/PWM_motor.c **** * File Name: PWM_motor.c
   3:.\Generated_Source\PSoC5/PWM_motor.c **** * Version 3.30
   4:.\Generated_Source\PSoC5/PWM_motor.c **** *
   5:.\Generated_Source\PSoC5/PWM_motor.c **** * Description:
   6:.\Generated_Source\PSoC5/PWM_motor.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC5/PWM_motor.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC5/PWM_motor.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC5/PWM_motor.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC5/PWM_motor.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC5/PWM_motor.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC5/PWM_motor.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC5/PWM_motor.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC5/PWM_motor.c **** *
  15:.\Generated_Source\PSoC5/PWM_motor.c **** * Note:
  16:.\Generated_Source\PSoC5/PWM_motor.c **** *
  17:.\Generated_Source\PSoC5/PWM_motor.c **** *******************************************************************************
  18:.\Generated_Source\PSoC5/PWM_motor.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC5/PWM_motor.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC5/PWM_motor.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC5/PWM_motor.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC5/PWM_motor.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC5/PWM_motor.c **** 
  24:.\Generated_Source\PSoC5/PWM_motor.c **** #include "PWM_motor.h"
  25:.\Generated_Source\PSoC5/PWM_motor.c **** 
  26:.\Generated_Source\PSoC5/PWM_motor.c **** /* Error message for removed <resource> through optimization */
  27:.\Generated_Source\PSoC5/PWM_motor.c **** #ifdef PWM_motor_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC5/PWM_motor.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC5/PWM_motor.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* PWM_motor_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC5/PWM_motor.c **** 
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 2


  32:.\Generated_Source\PSoC5/PWM_motor.c **** uint8 PWM_motor_initVar = 0u;
  33:.\Generated_Source\PSoC5/PWM_motor.c **** 
  34:.\Generated_Source\PSoC5/PWM_motor.c **** 
  35:.\Generated_Source\PSoC5/PWM_motor.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC5/PWM_motor.c **** * Function Name: PWM_motor_Start
  37:.\Generated_Source\PSoC5/PWM_motor.c **** ********************************************************************************
  38:.\Generated_Source\PSoC5/PWM_motor.c **** *
  39:.\Generated_Source\PSoC5/PWM_motor.c **** * Summary:
  40:.\Generated_Source\PSoC5/PWM_motor.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC5/PWM_motor.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC5/PWM_motor.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC5/PWM_motor.c **** *
  44:.\Generated_Source\PSoC5/PWM_motor.c **** * Parameters:
  45:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
  46:.\Generated_Source\PSoC5/PWM_motor.c **** *
  47:.\Generated_Source\PSoC5/PWM_motor.c **** * Return:
  48:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
  49:.\Generated_Source\PSoC5/PWM_motor.c **** *
  50:.\Generated_Source\PSoC5/PWM_motor.c **** * Global variables:
  51:.\Generated_Source\PSoC5/PWM_motor.c **** *  PWM_motor_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC5/PWM_motor.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC5/PWM_motor.c **** *
  54:.\Generated_Source\PSoC5/PWM_motor.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC5/PWM_motor.c **** void PWM_motor_Start(void) 
  56:.\Generated_Source\PSoC5/PWM_motor.c **** {
  57:.\Generated_Source\PSoC5/PWM_motor.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC5/PWM_motor.c ****     if(PWM_motor_initVar == 0u)
  59:.\Generated_Source\PSoC5/PWM_motor.c ****     {
  60:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_Init();
  61:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_initVar = 1u;
  62:.\Generated_Source\PSoC5/PWM_motor.c ****     }
  63:.\Generated_Source\PSoC5/PWM_motor.c ****     PWM_motor_Enable();
  64:.\Generated_Source\PSoC5/PWM_motor.c **** 
  65:.\Generated_Source\PSoC5/PWM_motor.c **** }
  66:.\Generated_Source\PSoC5/PWM_motor.c **** 
  67:.\Generated_Source\PSoC5/PWM_motor.c **** 
  68:.\Generated_Source\PSoC5/PWM_motor.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC5/PWM_motor.c **** * Function Name: PWM_motor_Init
  70:.\Generated_Source\PSoC5/PWM_motor.c **** ********************************************************************************
  71:.\Generated_Source\PSoC5/PWM_motor.c **** *
  72:.\Generated_Source\PSoC5/PWM_motor.c **** * Summary:
  73:.\Generated_Source\PSoC5/PWM_motor.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC5/PWM_motor.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC5/PWM_motor.c **** *  PWM_motor_Start().
  76:.\Generated_Source\PSoC5/PWM_motor.c **** *
  77:.\Generated_Source\PSoC5/PWM_motor.c **** * Parameters:
  78:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
  79:.\Generated_Source\PSoC5/PWM_motor.c **** *
  80:.\Generated_Source\PSoC5/PWM_motor.c **** * Return:
  81:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
  82:.\Generated_Source\PSoC5/PWM_motor.c **** *
  83:.\Generated_Source\PSoC5/PWM_motor.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC5/PWM_motor.c **** void PWM_motor_Init(void) 
  85:.\Generated_Source\PSoC5/PWM_motor.c **** {
  86:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UsingFixedFunction || PWM_motor_UseControl)
  87:.\Generated_Source\PSoC5/PWM_motor.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UsingFixedFunction || PWM_motor_UseControl) */
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 3


  89:.\Generated_Source\PSoC5/PWM_motor.c **** 
  90:.\Generated_Source\PSoC5/PWM_motor.c ****     #if(!PWM_motor_UsingFixedFunction)
  91:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(PWM_motor_UseStatus)
  92:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC5/PWM_motor.c ****             uint8 PWM_motor_interruptState;
  94:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UseStatus) */
  95:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (!PWM_motor_UsingFixedFunction) */
  96:.\Generated_Source\PSoC5/PWM_motor.c **** 
  97:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UsingFixedFunction)
  98:.\Generated_Source\PSoC5/PWM_motor.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_CONTROL |= PWM_motor_CFG0_MODE;
 100:.\Generated_Source\PSoC5/PWM_motor.c ****         #if (PWM_motor_DeadBand2_4)
 101:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_CONTROL |= PWM_motor_CFG0_DB;
 102:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_DeadBand2_4) */
 103:.\Generated_Source\PSoC5/PWM_motor.c **** 
 104:.\Generated_Source\PSoC5/PWM_motor.c ****         ctrl = PWM_motor_CONTROL3 & ((uint8 )(~PWM_motor_CTRL_CMPMODE1_MASK));
 105:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_CONTROL3 = ctrl | PWM_motor_DEFAULT_COMPARE1_MODE;
 106:.\Generated_Source\PSoC5/PWM_motor.c **** 
 107:.\Generated_Source\PSoC5/PWM_motor.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_RT1 &= ((uint8)(~PWM_motor_RT1_MASK));
 109:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_RT1 |= PWM_motor_SYNC;
 110:.\Generated_Source\PSoC5/PWM_motor.c **** 
 111:.\Generated_Source\PSoC5/PWM_motor.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_RT1 &= ((uint8)(~PWM_motor_SYNCDSI_MASK));
 113:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_RT1 |= PWM_motor_SYNCDSI_EN;
 114:.\Generated_Source\PSoC5/PWM_motor.c **** 
 115:.\Generated_Source\PSoC5/PWM_motor.c ****     #elif (PWM_motor_UseControl)
 116:.\Generated_Source\PSoC5/PWM_motor.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC5/PWM_motor.c ****         ctrl = PWM_motor_CONTROL & ((uint8)(~PWM_motor_CTRL_CMPMODE2_MASK)) &
 118:.\Generated_Source\PSoC5/PWM_motor.c ****                 ((uint8)(~PWM_motor_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_CONTROL = ctrl | PWM_motor_DEFAULT_COMPARE2_MODE |
 120:.\Generated_Source\PSoC5/PWM_motor.c ****                                    PWM_motor_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UsingFixedFunction) */
 122:.\Generated_Source\PSoC5/PWM_motor.c **** 
 123:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (!PWM_motor_UsingFixedFunction)
 124:.\Generated_Source\PSoC5/PWM_motor.c ****         #if (PWM_motor_Resolution == 8)
 125:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_AUX_CONTROLDP0 |= (PWM_motor_AUX_CTRL_FIFO0_CLR);
 127:.\Generated_Source\PSoC5/PWM_motor.c ****         #else /* (PWM_motor_Resolution == 16)*/
 128:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_AUX_CONTROLDP0 |= (PWM_motor_AUX_CTRL_FIFO0_CLR);
 130:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_AUX_CONTROLDP1 |= (PWM_motor_AUX_CTRL_FIFO0_CLR);
 131:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_Resolution == 8) */
 132:.\Generated_Source\PSoC5/PWM_motor.c **** 
 133:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_WriteCounter(PWM_motor_INIT_PERIOD_VALUE);
 134:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (!PWM_motor_UsingFixedFunction) */
 135:.\Generated_Source\PSoC5/PWM_motor.c **** 
 136:.\Generated_Source\PSoC5/PWM_motor.c ****     PWM_motor_WritePeriod(PWM_motor_INIT_PERIOD_VALUE);
 137:.\Generated_Source\PSoC5/PWM_motor.c **** 
 138:.\Generated_Source\PSoC5/PWM_motor.c ****         #if (PWM_motor_UseOneCompareMode)
 139:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_WriteCompare(PWM_motor_INIT_COMPARE_VALUE1);
 140:.\Generated_Source\PSoC5/PWM_motor.c ****         #else
 141:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_WriteCompare1(PWM_motor_INIT_COMPARE_VALUE1);
 142:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_WriteCompare2(PWM_motor_INIT_COMPARE_VALUE2);
 143:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UseOneCompareMode) */
 144:.\Generated_Source\PSoC5/PWM_motor.c **** 
 145:.\Generated_Source\PSoC5/PWM_motor.c ****         #if (PWM_motor_KillModeMinTime)
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 4


 146:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_WriteKillTime(PWM_motor_MinimumKillTime);
 147:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_KillModeMinTime) */
 148:.\Generated_Source\PSoC5/PWM_motor.c **** 
 149:.\Generated_Source\PSoC5/PWM_motor.c ****         #if (PWM_motor_DeadBandUsed)
 150:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_WriteDeadTime(PWM_motor_INIT_DEAD_TIME);
 151:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_DeadBandUsed) */
 152:.\Generated_Source\PSoC5/PWM_motor.c **** 
 153:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UseStatus || PWM_motor_UsingFixedFunction)
 154:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_SetInterruptMode(PWM_motor_INIT_INTERRUPTS_MODE);
 155:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UseStatus || PWM_motor_UsingFixedFunction) */
 156:.\Generated_Source\PSoC5/PWM_motor.c **** 
 157:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UsingFixedFunction)
 158:.\Generated_Source\PSoC5/PWM_motor.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_GLOBAL_ENABLE |= PWM_motor_BLOCK_EN_MASK;
 160:.\Generated_Source\PSoC5/PWM_motor.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_CONTROL2 |= PWM_motor_CTRL2_IRQ_SEL;
 162:.\Generated_Source\PSoC5/PWM_motor.c ****     #else
 163:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(PWM_motor_UseStatus)
 164:.\Generated_Source\PSoC5/PWM_motor.c **** 
 165:.\Generated_Source\PSoC5/PWM_motor.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Enter Critical Region*/
 167:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_interruptState = CyEnterCriticalSection();
 168:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_STATUS_AUX_CTRL |= PWM_motor_STATUS_ACTL_INT_EN_MASK;
 170:.\Generated_Source\PSoC5/PWM_motor.c **** 
 171:.\Generated_Source\PSoC5/PWM_motor.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC5/PWM_motor.c ****             CyExitCriticalSection(PWM_motor_interruptState);
 173:.\Generated_Source\PSoC5/PWM_motor.c **** 
 174:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Clear the FIFO to enable the PWM_motor_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC5/PWM_motor.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_ClearFIFO();
 177:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UseStatus) */
 178:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UsingFixedFunction) */
 179:.\Generated_Source\PSoC5/PWM_motor.c **** }
 180:.\Generated_Source\PSoC5/PWM_motor.c **** 
 181:.\Generated_Source\PSoC5/PWM_motor.c **** 
 182:.\Generated_Source\PSoC5/PWM_motor.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC5/PWM_motor.c **** * Function Name: PWM_motor_Enable
 184:.\Generated_Source\PSoC5/PWM_motor.c **** ********************************************************************************
 185:.\Generated_Source\PSoC5/PWM_motor.c **** *
 186:.\Generated_Source\PSoC5/PWM_motor.c **** * Summary:
 187:.\Generated_Source\PSoC5/PWM_motor.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC5/PWM_motor.c **** *
 189:.\Generated_Source\PSoC5/PWM_motor.c **** * Parameters:
 190:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
 191:.\Generated_Source\PSoC5/PWM_motor.c **** *
 192:.\Generated_Source\PSoC5/PWM_motor.c **** * Return:
 193:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
 194:.\Generated_Source\PSoC5/PWM_motor.c **** *
 195:.\Generated_Source\PSoC5/PWM_motor.c **** * Side Effects:
 196:.\Generated_Source\PSoC5/PWM_motor.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC5/PWM_motor.c **** *
 198:.\Generated_Source\PSoC5/PWM_motor.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC5/PWM_motor.c **** void PWM_motor_Enable(void) 
 200:.\Generated_Source\PSoC5/PWM_motor.c **** {
  27              		.loc 1 200 0
  28              		.cfi_startproc
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 5


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 201:.\Generated_Source\PSoC5/PWM_motor.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UsingFixedFunction)
 203:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_GLOBAL_ENABLE |= PWM_motor_BLOCK_EN_MASK;
 204:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_GLOBAL_STBY_ENABLE |= PWM_motor_BLOCK_STBY_EN_MASK;
 205:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UsingFixedFunction) */
 206:.\Generated_Source\PSoC5/PWM_motor.c **** 
 207:.\Generated_Source\PSoC5/PWM_motor.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UseControl || PWM_motor_UsingFixedFunction)
 209:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_CONTROL |= PWM_motor_CTRL_ENABLE;
  32              		.loc 1 209 0
  33 0000 024A     		ldr	r2, .L2
  34 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  35 0004 43F08003 		orr	r3, r3, #128
  36 0008 1370     		strb	r3, [r2]
  37 000a 7047     		bx	lr
  38              	.L3:
  39              		.align	2
  40              	.L2:
  41 000c 74640040 		.word	1073767540
  42              		.cfi_endproc
  43              	.LFE2:
  44              		.size	PWM_motor_Enable, .-PWM_motor_Enable
  45              		.section	.text.PWM_motor_Stop,"ax",%progbits
  46              		.align	2
  47              		.global	PWM_motor_Stop
  48              		.thumb
  49              		.thumb_func
  50              		.type	PWM_motor_Stop, %function
  51              	PWM_motor_Stop:
  52              	.LFB3:
 210:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UseControl || PWM_motor_UsingFixedFunction) */
 211:.\Generated_Source\PSoC5/PWM_motor.c **** }
 212:.\Generated_Source\PSoC5/PWM_motor.c **** 
 213:.\Generated_Source\PSoC5/PWM_motor.c **** 
 214:.\Generated_Source\PSoC5/PWM_motor.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC5/PWM_motor.c **** * Function Name: PWM_motor_Stop
 216:.\Generated_Source\PSoC5/PWM_motor.c **** ********************************************************************************
 217:.\Generated_Source\PSoC5/PWM_motor.c **** *
 218:.\Generated_Source\PSoC5/PWM_motor.c **** * Summary:
 219:.\Generated_Source\PSoC5/PWM_motor.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC5/PWM_motor.c **** *  interrupts.
 221:.\Generated_Source\PSoC5/PWM_motor.c **** *
 222:.\Generated_Source\PSoC5/PWM_motor.c **** * Parameters:
 223:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
 224:.\Generated_Source\PSoC5/PWM_motor.c **** *
 225:.\Generated_Source\PSoC5/PWM_motor.c **** * Return:
 226:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
 227:.\Generated_Source\PSoC5/PWM_motor.c **** *
 228:.\Generated_Source\PSoC5/PWM_motor.c **** * Side Effects:
 229:.\Generated_Source\PSoC5/PWM_motor.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC5/PWM_motor.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC5/PWM_motor.c **** *
 232:.\Generated_Source\PSoC5/PWM_motor.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC5/PWM_motor.c **** void PWM_motor_Stop(void) 
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 6


 234:.\Generated_Source\PSoC5/PWM_motor.c **** {
  53              		.loc 1 234 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
 235:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UseControl || PWM_motor_UsingFixedFunction)
 236:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_CONTROL &= ((uint8)(~PWM_motor_CTRL_ENABLE));
  58              		.loc 1 236 0
  59 0000 024A     		ldr	r2, .L5
  60 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  61 0004 03F07F03 		and	r3, r3, #127
  62 0008 1370     		strb	r3, [r2]
  63 000a 7047     		bx	lr
  64              	.L6:
  65              		.align	2
  66              	.L5:
  67 000c 74640040 		.word	1073767540
  68              		.cfi_endproc
  69              	.LFE3:
  70              		.size	PWM_motor_Stop, .-PWM_motor_Stop
  71              		.section	.text.PWM_motor_WriteCounter,"ax",%progbits
  72              		.align	2
  73              		.global	PWM_motor_WriteCounter
  74              		.thumb
  75              		.thumb_func
  76              		.type	PWM_motor_WriteCounter, %function
  77              	PWM_motor_WriteCounter:
  78              	.LFB4:
 237:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UseControl || PWM_motor_UsingFixedFunction) */
 238:.\Generated_Source\PSoC5/PWM_motor.c **** 
 239:.\Generated_Source\PSoC5/PWM_motor.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UsingFixedFunction)
 241:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_GLOBAL_ENABLE &= ((uint8)(~PWM_motor_BLOCK_EN_MASK));
 242:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_motor_BLOCK_STBY_EN_MASK));
 243:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UsingFixedFunction) */
 244:.\Generated_Source\PSoC5/PWM_motor.c **** }
 245:.\Generated_Source\PSoC5/PWM_motor.c **** 
 246:.\Generated_Source\PSoC5/PWM_motor.c **** #if (PWM_motor_UseOneCompareMode)
 247:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_CompareMode1SW)
 248:.\Generated_Source\PSoC5/PWM_motor.c **** 
 249:.\Generated_Source\PSoC5/PWM_motor.c **** 
 250:.\Generated_Source\PSoC5/PWM_motor.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC5/PWM_motor.c ****         * Function Name: PWM_motor_SetCompareMode
 252:.\Generated_Source\PSoC5/PWM_motor.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 254:.\Generated_Source\PSoC5/PWM_motor.c ****         * Summary:
 255:.\Generated_Source\PSoC5/PWM_motor.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC5/PWM_motor.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 258:.\Generated_Source\PSoC5/PWM_motor.c ****         * Parameters:
 259:.\Generated_Source\PSoC5/PWM_motor.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC5/PWM_motor.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 262:.\Generated_Source\PSoC5/PWM_motor.c ****         * Return:
 263:.\Generated_Source\PSoC5/PWM_motor.c ****         *  None
 264:.\Generated_Source\PSoC5/PWM_motor.c ****         *
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 7


 265:.\Generated_Source\PSoC5/PWM_motor.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC5/PWM_motor.c ****         void PWM_motor_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC5/PWM_motor.c ****         {
 268:.\Generated_Source\PSoC5/PWM_motor.c ****             #if(PWM_motor_UsingFixedFunction)
 269:.\Generated_Source\PSoC5/PWM_motor.c **** 
 270:.\Generated_Source\PSoC5/PWM_motor.c ****                 #if(0 != PWM_motor_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC5/PWM_motor.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_motor_CTRL_CMPMODE
 272:.\Generated_Source\PSoC5/PWM_motor.c ****                 #else
 273:.\Generated_Source\PSoC5/PWM_motor.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC5/PWM_motor.c ****                 #endif /* (0 != PWM_motor_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC5/PWM_motor.c **** 
 276:.\Generated_Source\PSoC5/PWM_motor.c ****                 PWM_motor_CONTROL3 &= ((uint8)(~PWM_motor_CTRL_CMPMODE1_MASK)); /*Clear Existing Da
 277:.\Generated_Source\PSoC5/PWM_motor.c ****                 PWM_motor_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC5/PWM_motor.c **** 
 279:.\Generated_Source\PSoC5/PWM_motor.c ****             #elif (PWM_motor_UseControl)
 280:.\Generated_Source\PSoC5/PWM_motor.c **** 
 281:.\Generated_Source\PSoC5/PWM_motor.c ****                 #if(0 != PWM_motor_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC5/PWM_motor.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_motor_CTRL_CMPMOD
 283:.\Generated_Source\PSoC5/PWM_motor.c ****                                                 PWM_motor_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC5/PWM_motor.c ****                 #else
 285:.\Generated_Source\PSoC5/PWM_motor.c ****                     uint8 comparemode1masked = comparemode & PWM_motor_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC5/PWM_motor.c ****                 #endif /* (0 != PWM_motor_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC5/PWM_motor.c **** 
 288:.\Generated_Source\PSoC5/PWM_motor.c ****                 #if(0 != PWM_motor_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC5/PWM_motor.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_motor_CTRL_CMPMOD
 290:.\Generated_Source\PSoC5/PWM_motor.c ****                                                PWM_motor_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC5/PWM_motor.c ****                 #else
 292:.\Generated_Source\PSoC5/PWM_motor.c ****                     uint8 comparemode2masked = comparemode & PWM_motor_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC5/PWM_motor.c ****                 #endif /* (0 != PWM_motor_CTRL_CMPMODE2_SHIFT) */
 294:.\Generated_Source\PSoC5/PWM_motor.c **** 
 295:.\Generated_Source\PSoC5/PWM_motor.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC5/PWM_motor.c ****                 PWM_motor_CONTROL &= ((uint8)(~(PWM_motor_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC5/PWM_motor.c ****                                             PWM_motor_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC5/PWM_motor.c ****                 PWM_motor_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC5/PWM_motor.c **** 
 300:.\Generated_Source\PSoC5/PWM_motor.c ****             #else
 301:.\Generated_Source\PSoC5/PWM_motor.c ****                 uint8 temp = comparemode;
 302:.\Generated_Source\PSoC5/PWM_motor.c ****             #endif /* (PWM_motor_UsingFixedFunction) */
 303:.\Generated_Source\PSoC5/PWM_motor.c ****         }
 304:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* PWM_motor_CompareMode1SW */
 305:.\Generated_Source\PSoC5/PWM_motor.c **** 
 306:.\Generated_Source\PSoC5/PWM_motor.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC5/PWM_motor.c **** 
 308:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_CompareMode1SW)
 309:.\Generated_Source\PSoC5/PWM_motor.c **** 
 310:.\Generated_Source\PSoC5/PWM_motor.c **** 
 311:.\Generated_Source\PSoC5/PWM_motor.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC5/PWM_motor.c ****         * Function Name: PWM_motor_SetCompareMode1
 313:.\Generated_Source\PSoC5/PWM_motor.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 315:.\Generated_Source\PSoC5/PWM_motor.c ****         * Summary:
 316:.\Generated_Source\PSoC5/PWM_motor.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 318:.\Generated_Source\PSoC5/PWM_motor.c ****         * Parameters:
 319:.\Generated_Source\PSoC5/PWM_motor.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC5/PWM_motor.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC5/PWM_motor.c ****         *
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 8


 322:.\Generated_Source\PSoC5/PWM_motor.c ****         * Return:
 323:.\Generated_Source\PSoC5/PWM_motor.c ****         *  None
 324:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 325:.\Generated_Source\PSoC5/PWM_motor.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC5/PWM_motor.c ****         void PWM_motor_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC5/PWM_motor.c ****         {
 328:.\Generated_Source\PSoC5/PWM_motor.c ****             #if(0 != PWM_motor_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC5/PWM_motor.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_motor_CTRL_CMPMODE1_SH
 330:.\Generated_Source\PSoC5/PWM_motor.c ****                                            PWM_motor_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC5/PWM_motor.c ****             #else
 332:.\Generated_Source\PSoC5/PWM_motor.c ****                 uint8 comparemodemasked = comparemode & PWM_motor_CTRL_CMPMODE1_MASK;
 333:.\Generated_Source\PSoC5/PWM_motor.c ****             #endif /* (0 != PWM_motor_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC5/PWM_motor.c **** 
 335:.\Generated_Source\PSoC5/PWM_motor.c ****             #if (PWM_motor_UseControl)
 336:.\Generated_Source\PSoC5/PWM_motor.c ****                 PWM_motor_CONTROL &= ((uint8)(~PWM_motor_CTRL_CMPMODE1_MASK)); /*Clear existing mod
 337:.\Generated_Source\PSoC5/PWM_motor.c ****                 PWM_motor_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC5/PWM_motor.c ****             #endif /* (PWM_motor_UseControl) */
 339:.\Generated_Source\PSoC5/PWM_motor.c ****         }
 340:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* PWM_motor_CompareMode1SW */
 341:.\Generated_Source\PSoC5/PWM_motor.c **** 
 342:.\Generated_Source\PSoC5/PWM_motor.c **** #if (PWM_motor_CompareMode2SW)
 343:.\Generated_Source\PSoC5/PWM_motor.c **** 
 344:.\Generated_Source\PSoC5/PWM_motor.c **** 
 345:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_SetCompareMode2
 347:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 349:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 350:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 352:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 353:.\Generated_Source\PSoC5/PWM_motor.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC5/PWM_motor.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 356:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 357:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 358:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 359:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC5/PWM_motor.c ****     void PWM_motor_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 362:.\Generated_Source\PSoC5/PWM_motor.c **** 
 363:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(0 != PWM_motor_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC5/PWM_motor.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_motor_CTRL_CMPMODE2_SHIFT)
 365:.\Generated_Source\PSoC5/PWM_motor.c ****                                                  PWM_motor_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC5/PWM_motor.c ****         #else
 367:.\Generated_Source\PSoC5/PWM_motor.c ****             uint8 comparemodemasked = comparemode & PWM_motor_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (0 != PWM_motor_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC5/PWM_motor.c **** 
 370:.\Generated_Source\PSoC5/PWM_motor.c ****         #if (PWM_motor_UseControl)
 371:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_CONTROL &= ((uint8)(~PWM_motor_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UseControl) */
 374:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 375:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /*PWM_motor_CompareMode2SW */
 376:.\Generated_Source\PSoC5/PWM_motor.c **** 
 377:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC5/PWM_motor.c **** 
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 9


 379:.\Generated_Source\PSoC5/PWM_motor.c **** 
 380:.\Generated_Source\PSoC5/PWM_motor.c **** #if (!PWM_motor_UsingFixedFunction)
 381:.\Generated_Source\PSoC5/PWM_motor.c **** 
 382:.\Generated_Source\PSoC5/PWM_motor.c **** 
 383:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_WriteCounter
 385:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 387:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 388:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC5/PWM_motor.c ****     *  implemented for that currently running period and only that period. This API
 390:.\Generated_Source\PSoC5/PWM_motor.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC5/PWM_motor.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 393:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 394:.\Generated_Source\PSoC5/PWM_motor.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 396:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 397:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 398:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 399:.\Generated_Source\PSoC5/PWM_motor.c ****     * Side Effects:
 400:.\Generated_Source\PSoC5/PWM_motor.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 402:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC5/PWM_motor.c ****     void PWM_motor_WriteCounter(uint16 counter) \
 404:.\Generated_Source\PSoC5/PWM_motor.c ****                                        
 405:.\Generated_Source\PSoC5/PWM_motor.c ****     {
  79              		.loc 1 405 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL0:
 406:.\Generated_Source\PSoC5/PWM_motor.c ****         CY_SET_REG16(PWM_motor_COUNTER_LSB_PTR, counter);
  85              		.loc 1 406 0
  86 0000 014B     		ldr	r3, .L8
  87 0002 1880     		strh	r0, [r3]	@ movhi
  88 0004 7047     		bx	lr
  89              	.L9:
  90 0006 00BF     		.align	2
  91              	.L8:
  92 0008 08680040 		.word	1073768456
  93              		.cfi_endproc
  94              	.LFE4:
  95              		.size	PWM_motor_WriteCounter, .-PWM_motor_WriteCounter
  96              		.section	.text.PWM_motor_ReadCounter,"ax",%progbits
  97              		.align	2
  98              		.global	PWM_motor_ReadCounter
  99              		.thumb
 100              		.thumb_func
 101              		.type	PWM_motor_ReadCounter, %function
 102              	PWM_motor_ReadCounter:
 103              	.LFB5:
 407:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 408:.\Generated_Source\PSoC5/PWM_motor.c **** 
 409:.\Generated_Source\PSoC5/PWM_motor.c **** 
 410:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 10


 411:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_ReadCounter
 412:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 414:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 415:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:.\Generated_Source\PSoC5/PWM_motor.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 418:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 419:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 420:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 421:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 422:.\Generated_Source\PSoC5/PWM_motor.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 424:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC5/PWM_motor.c ****     uint16 PWM_motor_ReadCounter(void) 
 426:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 104              		.loc 1 426 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 427:.\Generated_Source\PSoC5/PWM_motor.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC5/PWM_motor.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC5/PWM_motor.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC5/PWM_motor.c ****           (void)CY_GET_REG8(PWM_motor_COUNTERCAP_LSB_PTR_8BIT);
 109              		.loc 1 430 0
 110 0000 024B     		ldr	r3, .L11
 111 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:.\Generated_Source\PSoC5/PWM_motor.c **** 
 432:.\Generated_Source\PSoC5/PWM_motor.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC5/PWM_motor.c ****         return (CY_GET_REG16(PWM_motor_CAPTURE_LSB_PTR));
 112              		.loc 1 433 0
 113 0004 024B     		ldr	r3, .L11+4
 114 0006 1888     		ldrh	r0, [r3]
 434:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 115              		.loc 1 434 0
 116 0008 80B2     		uxth	r0, r0
 117 000a 7047     		bx	lr
 118              	.L12:
 119              		.align	2
 120              	.L11:
 121 000c 14640040 		.word	1073767444
 122 0010 A8680040 		.word	1073768616
 123              		.cfi_endproc
 124              	.LFE5:
 125              		.size	PWM_motor_ReadCounter, .-PWM_motor_ReadCounter
 126              		.section	.text.PWM_motor_WritePeriod,"ax",%progbits
 127              		.align	2
 128              		.global	PWM_motor_WritePeriod
 129              		.thumb
 130              		.thumb_func
 131              		.type	PWM_motor_WritePeriod, %function
 132              	PWM_motor_WritePeriod:
 133              	.LFB7:
 435:.\Generated_Source\PSoC5/PWM_motor.c **** 
 436:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UseStatus)
 437:.\Generated_Source\PSoC5/PWM_motor.c **** 
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 11


 438:.\Generated_Source\PSoC5/PWM_motor.c **** 
 439:.\Generated_Source\PSoC5/PWM_motor.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC5/PWM_motor.c ****         * Function Name: PWM_motor_ClearFIFO
 441:.\Generated_Source\PSoC5/PWM_motor.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 443:.\Generated_Source\PSoC5/PWM_motor.c ****         * Summary:
 444:.\Generated_Source\PSoC5/PWM_motor.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 446:.\Generated_Source\PSoC5/PWM_motor.c ****         * Parameters:
 447:.\Generated_Source\PSoC5/PWM_motor.c ****         *  None
 448:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 449:.\Generated_Source\PSoC5/PWM_motor.c ****         * Return:
 450:.\Generated_Source\PSoC5/PWM_motor.c ****         *  None
 451:.\Generated_Source\PSoC5/PWM_motor.c ****         *
 452:.\Generated_Source\PSoC5/PWM_motor.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC5/PWM_motor.c ****         void PWM_motor_ClearFIFO(void) 
 454:.\Generated_Source\PSoC5/PWM_motor.c ****         {
 455:.\Generated_Source\PSoC5/PWM_motor.c ****             while(0u != (PWM_motor_ReadStatusRegister() & PWM_motor_STATUS_FIFONEMPTY))
 456:.\Generated_Source\PSoC5/PWM_motor.c ****             {
 457:.\Generated_Source\PSoC5/PWM_motor.c ****                 (void)PWM_motor_ReadCapture();
 458:.\Generated_Source\PSoC5/PWM_motor.c ****             }
 459:.\Generated_Source\PSoC5/PWM_motor.c ****         }
 460:.\Generated_Source\PSoC5/PWM_motor.c **** 
 461:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* PWM_motor_UseStatus */
 462:.\Generated_Source\PSoC5/PWM_motor.c **** 
 463:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* !PWM_motor_UsingFixedFunction */
 464:.\Generated_Source\PSoC5/PWM_motor.c **** 
 465:.\Generated_Source\PSoC5/PWM_motor.c **** 
 466:.\Generated_Source\PSoC5/PWM_motor.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC5/PWM_motor.c **** * Function Name: PWM_motor_WritePeriod
 468:.\Generated_Source\PSoC5/PWM_motor.c **** ********************************************************************************
 469:.\Generated_Source\PSoC5/PWM_motor.c **** *
 470:.\Generated_Source\PSoC5/PWM_motor.c **** * Summary:
 471:.\Generated_Source\PSoC5/PWM_motor.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC5/PWM_motor.c **** *  will be loaded the next time terminal count is detected.
 473:.\Generated_Source\PSoC5/PWM_motor.c **** *
 474:.\Generated_Source\PSoC5/PWM_motor.c **** * Parameters:
 475:.\Generated_Source\PSoC5/PWM_motor.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC5/PWM_motor.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC5/PWM_motor.c **** *
 478:.\Generated_Source\PSoC5/PWM_motor.c **** * Return:
 479:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
 480:.\Generated_Source\PSoC5/PWM_motor.c **** *
 481:.\Generated_Source\PSoC5/PWM_motor.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC5/PWM_motor.c **** void PWM_motor_WritePeriod(uint16 period) 
 483:.\Generated_Source\PSoC5/PWM_motor.c **** {
 134              		.loc 1 483 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL1:
 484:.\Generated_Source\PSoC5/PWM_motor.c ****     #if(PWM_motor_UsingFixedFunction)
 485:.\Generated_Source\PSoC5/PWM_motor.c ****         CY_SET_REG16(PWM_motor_PERIOD_LSB_PTR, (uint16)period);
 486:.\Generated_Source\PSoC5/PWM_motor.c ****     #else
 487:.\Generated_Source\PSoC5/PWM_motor.c ****         CY_SET_REG16(PWM_motor_PERIOD_LSB_PTR, period);
 140              		.loc 1 487 0
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 12


 141 0000 014B     		ldr	r3, .L14
 142 0002 1880     		strh	r0, [r3]	@ movhi
 143 0004 7047     		bx	lr
 144              	.L15:
 145 0006 00BF     		.align	2
 146              	.L14:
 147 0008 88680040 		.word	1073768584
 148              		.cfi_endproc
 149              	.LFE7:
 150              		.size	PWM_motor_WritePeriod, .-PWM_motor_WritePeriod
 151              		.section	.text.PWM_motor_WriteCompare1,"ax",%progbits
 152              		.align	2
 153              		.global	PWM_motor_WriteCompare1
 154              		.thumb
 155              		.thumb_func
 156              		.type	PWM_motor_WriteCompare1, %function
 157              	PWM_motor_WriteCompare1:
 158              	.LFB8:
 488:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UsingFixedFunction) */
 489:.\Generated_Source\PSoC5/PWM_motor.c **** }
 490:.\Generated_Source\PSoC5/PWM_motor.c **** 
 491:.\Generated_Source\PSoC5/PWM_motor.c **** #if (PWM_motor_UseOneCompareMode)
 492:.\Generated_Source\PSoC5/PWM_motor.c **** 
 493:.\Generated_Source\PSoC5/PWM_motor.c **** 
 494:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_WriteCompare
 496:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 498:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 499:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC5/PWM_motor.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC5/PWM_motor.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC5/PWM_motor.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 505:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 506:.\Generated_Source\PSoC5/PWM_motor.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 508:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 509:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 510:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 511:.\Generated_Source\PSoC5/PWM_motor.c ****     * Side Effects:
 512:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 515:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC5/PWM_motor.c ****     void PWM_motor_WriteCompare(uint16 compare) \
 517:.\Generated_Source\PSoC5/PWM_motor.c ****                                        
 518:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 519:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(PWM_motor_UsingFixedFunction)
 520:.\Generated_Source\PSoC5/PWM_motor.c ****             CY_SET_REG16(PWM_motor_COMPARE1_LSB_PTR, (uint16)compare);
 521:.\Generated_Source\PSoC5/PWM_motor.c ****         #else
 522:.\Generated_Source\PSoC5/PWM_motor.c ****             CY_SET_REG16(PWM_motor_COMPARE1_LSB_PTR, compare);
 523:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UsingFixedFunction) */
 524:.\Generated_Source\PSoC5/PWM_motor.c **** 
 525:.\Generated_Source\PSoC5/PWM_motor.c ****         #if (PWM_motor_PWMMode == PWM_motor__B_PWM__DITHER)
 526:.\Generated_Source\PSoC5/PWM_motor.c ****             #if(PWM_motor_UsingFixedFunction)
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 13


 527:.\Generated_Source\PSoC5/PWM_motor.c ****                 CY_SET_REG16(PWM_motor_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC5/PWM_motor.c ****             #else
 529:.\Generated_Source\PSoC5/PWM_motor.c ****                 CY_SET_REG16(PWM_motor_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC5/PWM_motor.c ****             #endif /* (PWM_motor_UsingFixedFunction) */
 531:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_PWMMode == PWM_motor__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 533:.\Generated_Source\PSoC5/PWM_motor.c **** 
 534:.\Generated_Source\PSoC5/PWM_motor.c **** 
 535:.\Generated_Source\PSoC5/PWM_motor.c **** #else
 536:.\Generated_Source\PSoC5/PWM_motor.c **** 
 537:.\Generated_Source\PSoC5/PWM_motor.c **** 
 538:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_WriteCompare1
 540:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 542:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 543:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC5/PWM_motor.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:.\Generated_Source\PSoC5/PWM_motor.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC5/PWM_motor.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 548:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 549:.\Generated_Source\PSoC5/PWM_motor.c ****     *  compare:  New compare value.
 550:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 551:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 552:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 553:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 554:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC5/PWM_motor.c ****     void PWM_motor_WriteCompare1(uint16 compare) \
 556:.\Generated_Source\PSoC5/PWM_motor.c ****                                         
 557:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 159              		.loc 1 557 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164              	.LVL2:
 558:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(PWM_motor_UsingFixedFunction)
 559:.\Generated_Source\PSoC5/PWM_motor.c ****             CY_SET_REG16(PWM_motor_COMPARE1_LSB_PTR, (uint16)compare);
 560:.\Generated_Source\PSoC5/PWM_motor.c ****         #else
 561:.\Generated_Source\PSoC5/PWM_motor.c ****             CY_SET_REG16(PWM_motor_COMPARE1_LSB_PTR, compare);
 165              		.loc 1 561 0
 166 0000 014B     		ldr	r3, .L17
 167 0002 1880     		strh	r0, [r3]	@ movhi
 168 0004 7047     		bx	lr
 169              	.L18:
 170 0006 00BF     		.align	2
 171              	.L17:
 172 0008 48680040 		.word	1073768520
 173              		.cfi_endproc
 174              	.LFE8:
 175              		.size	PWM_motor_WriteCompare1, .-PWM_motor_WriteCompare1
 176              		.section	.text.PWM_motor_WriteCompare2,"ax",%progbits
 177              		.align	2
 178              		.global	PWM_motor_WriteCompare2
 179              		.thumb
 180              		.thumb_func
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 14


 181              		.type	PWM_motor_WriteCompare2, %function
 182              	PWM_motor_WriteCompare2:
 183              	.LFB9:
 562:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UsingFixedFunction) */
 563:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 564:.\Generated_Source\PSoC5/PWM_motor.c **** 
 565:.\Generated_Source\PSoC5/PWM_motor.c **** 
 566:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_WriteCompare2
 568:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 570:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 571:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC5/PWM_motor.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC5/PWM_motor.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC5/PWM_motor.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC5/PWM_motor.c ****     *  mode.
 576:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 577:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 578:.\Generated_Source\PSoC5/PWM_motor.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 580:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 581:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 582:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 583:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC5/PWM_motor.c ****     void PWM_motor_WriteCompare2(uint16 compare) \
 585:.\Generated_Source\PSoC5/PWM_motor.c ****                                         
 586:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 184              		.loc 1 586 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL3:
 587:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(PWM_motor_UsingFixedFunction)
 588:.\Generated_Source\PSoC5/PWM_motor.c ****             CY_SET_REG16(PWM_motor_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC5/PWM_motor.c ****         #else
 590:.\Generated_Source\PSoC5/PWM_motor.c ****             CY_SET_REG16(PWM_motor_COMPARE2_LSB_PTR, compare);
 190              		.loc 1 590 0
 191 0000 014B     		ldr	r3, .L20
 192 0002 1880     		strh	r0, [r3]	@ movhi
 193 0004 7047     		bx	lr
 194              	.L21:
 195 0006 00BF     		.align	2
 196              	.L20:
 197 0008 68680040 		.word	1073768552
 198              		.cfi_endproc
 199              	.LFE9:
 200              		.size	PWM_motor_WriteCompare2, .-PWM_motor_WriteCompare2
 201              		.section	.text.PWM_motor_SetInterruptMode,"ax",%progbits
 202              		.align	2
 203              		.global	PWM_motor_SetInterruptMode
 204              		.thumb
 205              		.thumb_func
 206              		.type	PWM_motor_SetInterruptMode, %function
 207              	PWM_motor_SetInterruptMode:
 208              	.LFB10:
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 15


 591:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UsingFixedFunction) */
 592:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 593:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* UseOneCompareMode */
 594:.\Generated_Source\PSoC5/PWM_motor.c **** 
 595:.\Generated_Source\PSoC5/PWM_motor.c **** #if (PWM_motor_DeadBandUsed)
 596:.\Generated_Source\PSoC5/PWM_motor.c **** 
 597:.\Generated_Source\PSoC5/PWM_motor.c **** 
 598:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_WriteDeadTime
 600:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 602:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 603:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 605:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 606:.\Generated_Source\PSoC5/PWM_motor.c ****     *  deadtime:  Number of counts for dead time
 607:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 608:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 609:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 610:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 611:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC5/PWM_motor.c ****     void PWM_motor_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 614:.\Generated_Source\PSoC5/PWM_motor.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(!PWM_motor_DeadBand2_4)
 616:.\Generated_Source\PSoC5/PWM_motor.c ****             CY_SET_REG8(PWM_motor_DEADBAND_COUNT_PTR, deadtime);
 617:.\Generated_Source\PSoC5/PWM_motor.c ****         #else
 618:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_DEADBAND_COUNT &= ((uint8)(~PWM_motor_DEADBAND_COUNT_MASK));
 621:.\Generated_Source\PSoC5/PWM_motor.c **** 
 622:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Set new dead time */
 623:.\Generated_Source\PSoC5/PWM_motor.c ****             #if(PWM_motor_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC5/PWM_motor.c ****                 PWM_motor_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_motor_DEADBAND_COUNT_SH
 625:.\Generated_Source\PSoC5/PWM_motor.c ****                                                     PWM_motor_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC5/PWM_motor.c ****             #else
 627:.\Generated_Source\PSoC5/PWM_motor.c ****                 PWM_motor_DEADBAND_COUNT |= deadtime & PWM_motor_DEADBAND_COUNT_MASK;
 628:.\Generated_Source\PSoC5/PWM_motor.c ****             #endif /* (PWM_motor_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC5/PWM_motor.c **** 
 630:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (!PWM_motor_DeadBand2_4) */
 631:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 632:.\Generated_Source\PSoC5/PWM_motor.c **** 
 633:.\Generated_Source\PSoC5/PWM_motor.c **** 
 634:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_ReadDeadTime
 636:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 638:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 639:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 641:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 642:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 643:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 644:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 645:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 647:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 16


 648:.\Generated_Source\PSoC5/PWM_motor.c ****     uint8 PWM_motor_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 650:.\Generated_Source\PSoC5/PWM_motor.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(!PWM_motor_DeadBand2_4)
 652:.\Generated_Source\PSoC5/PWM_motor.c ****             return (CY_GET_REG8(PWM_motor_DEADBAND_COUNT_PTR));
 653:.\Generated_Source\PSoC5/PWM_motor.c ****         #else
 654:.\Generated_Source\PSoC5/PWM_motor.c **** 
 655:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC5/PWM_motor.c ****             #if(PWM_motor_DEADBAND_COUNT_SHIFT)
 657:.\Generated_Source\PSoC5/PWM_motor.c ****                 return ((uint8)(((uint8)(PWM_motor_DEADBAND_COUNT & PWM_motor_DEADBAND_COUNT_MASK))
 658:.\Generated_Source\PSoC5/PWM_motor.c ****                                                                            PWM_motor_DEADBAND_COUNT
 659:.\Generated_Source\PSoC5/PWM_motor.c ****             #else
 660:.\Generated_Source\PSoC5/PWM_motor.c ****                 return (PWM_motor_DEADBAND_COUNT & PWM_motor_DEADBAND_COUNT_MASK);
 661:.\Generated_Source\PSoC5/PWM_motor.c ****             #endif /* (PWM_motor_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (!PWM_motor_DeadBand2_4) */
 663:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 664:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC5/PWM_motor.c **** 
 666:.\Generated_Source\PSoC5/PWM_motor.c **** #if (PWM_motor_UseStatus || PWM_motor_UsingFixedFunction)
 667:.\Generated_Source\PSoC5/PWM_motor.c **** 
 668:.\Generated_Source\PSoC5/PWM_motor.c **** 
 669:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_SetInterruptMode
 671:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 673:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 674:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC5/PWM_motor.c ****     *  source status register.
 676:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 677:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 678:.\Generated_Source\PSoC5/PWM_motor.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 680:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 681:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 682:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 683:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC5/PWM_motor.c ****     void PWM_motor_SetInterruptMode(uint8 interruptMode) 
 685:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 209              		.loc 1 685 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 214              	.LVL4:
 686:.\Generated_Source\PSoC5/PWM_motor.c ****         CY_SET_REG8(PWM_motor_STATUS_MASK_PTR, interruptMode);
 215              		.loc 1 686 0
 216 0000 014B     		ldr	r3, .L23
 217 0002 1870     		strb	r0, [r3]
 218 0004 7047     		bx	lr
 219              	.L24:
 220 0006 00BF     		.align	2
 221              	.L23:
 222 0008 85640040 		.word	1073767557
 223              		.cfi_endproc
 224              	.LFE10:
 225              		.size	PWM_motor_SetInterruptMode, .-PWM_motor_SetInterruptMode
 226              		.section	.text.PWM_motor_ReadStatusRegister,"ax",%progbits
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 17


 227              		.align	2
 228              		.global	PWM_motor_ReadStatusRegister
 229              		.thumb
 230              		.thumb_func
 231              		.type	PWM_motor_ReadStatusRegister, %function
 232              	PWM_motor_ReadStatusRegister:
 233              	.LFB11:
 687:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 688:.\Generated_Source\PSoC5/PWM_motor.c **** 
 689:.\Generated_Source\PSoC5/PWM_motor.c **** 
 690:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_ReadStatusRegister
 692:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 694:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 695:.\Generated_Source\PSoC5/PWM_motor.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 697:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 698:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 699:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 700:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 701:.\Generated_Source\PSoC5/PWM_motor.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [5]   : Kill event output
 704:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [3]   : FIFO full
 706:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 710:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC5/PWM_motor.c ****     uint8 PWM_motor_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 234              		.loc 1 712 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 713:.\Generated_Source\PSoC5/PWM_motor.c ****         return (CY_GET_REG8(PWM_motor_STATUS_PTR));
 239              		.loc 1 713 0
 240 0000 014B     		ldr	r3, .L26
 241 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 242              		.loc 1 714 0
 243 0004 7047     		bx	lr
 244              	.L27:
 245 0006 00BF     		.align	2
 246              	.L26:
 247 0008 65640040 		.word	1073767525
 248              		.cfi_endproc
 249              	.LFE11:
 250              		.size	PWM_motor_ReadStatusRegister, .-PWM_motor_ReadStatusRegister
 251              		.section	.text.PWM_motor_ReadControlRegister,"ax",%progbits
 252              		.align	2
 253              		.global	PWM_motor_ReadControlRegister
 254              		.thumb
 255              		.thumb_func
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 18


 256              		.type	PWM_motor_ReadControlRegister, %function
 257              	PWM_motor_ReadControlRegister:
 258              	.LFB12:
 715:.\Generated_Source\PSoC5/PWM_motor.c **** 
 716:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* (PWM_motor_UseStatus || PWM_motor_UsingFixedFunction) */
 717:.\Generated_Source\PSoC5/PWM_motor.c **** 
 718:.\Generated_Source\PSoC5/PWM_motor.c **** 
 719:.\Generated_Source\PSoC5/PWM_motor.c **** #if (PWM_motor_UseControl)
 720:.\Generated_Source\PSoC5/PWM_motor.c **** 
 721:.\Generated_Source\PSoC5/PWM_motor.c **** 
 722:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 723:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_ReadControlRegister
 724:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 726:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 727:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC5/PWM_motor.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 730:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 731:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 732:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 733:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 734:.\Generated_Source\PSoC5/PWM_motor.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 736:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC5/PWM_motor.c ****     uint8 PWM_motor_ReadControlRegister(void) 
 738:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 259              		.loc 1 738 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 739:.\Generated_Source\PSoC5/PWM_motor.c ****         uint8 result;
 740:.\Generated_Source\PSoC5/PWM_motor.c **** 
 741:.\Generated_Source\PSoC5/PWM_motor.c ****         result = CY_GET_REG8(PWM_motor_CONTROL_PTR);
 264              		.loc 1 741 0
 265 0000 014B     		ldr	r3, .L29
 266 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 267              	.LVL5:
 742:.\Generated_Source\PSoC5/PWM_motor.c ****         return (result);
 743:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 268              		.loc 1 743 0
 269 0004 7047     		bx	lr
 270              	.L30:
 271 0006 00BF     		.align	2
 272              	.L29:
 273 0008 74640040 		.word	1073767540
 274              		.cfi_endproc
 275              	.LFE12:
 276              		.size	PWM_motor_ReadControlRegister, .-PWM_motor_ReadControlRegister
 277              		.section	.text.PWM_motor_WriteControlRegister,"ax",%progbits
 278              		.align	2
 279              		.global	PWM_motor_WriteControlRegister
 280              		.thumb
 281              		.thumb_func
 282              		.type	PWM_motor_WriteControlRegister, %function
 283              	PWM_motor_WriteControlRegister:
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 19


 284              	.LFB13:
 744:.\Generated_Source\PSoC5/PWM_motor.c **** 
 745:.\Generated_Source\PSoC5/PWM_motor.c **** 
 746:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_WriteControlRegister
 748:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 750:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 751:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC5/PWM_motor.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 754:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 755:.\Generated_Source\PSoC5/PWM_motor.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC5/PWM_motor.c ****     *  [2:0] : Compare Mode2
 760:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 761:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 762:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 763:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 764:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC5/PWM_motor.c ****     void PWM_motor_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 285              		.loc 1 766 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 290              	.LVL6:
 767:.\Generated_Source\PSoC5/PWM_motor.c ****         CY_SET_REG8(PWM_motor_CONTROL_PTR, control);
 291              		.loc 1 767 0
 292 0000 014B     		ldr	r3, .L32
 293 0002 1870     		strb	r0, [r3]
 294 0004 7047     		bx	lr
 295              	.L33:
 296 0006 00BF     		.align	2
 297              	.L32:
 298 0008 74640040 		.word	1073767540
 299              		.cfi_endproc
 300              	.LFE13:
 301              		.size	PWM_motor_WriteControlRegister, .-PWM_motor_WriteControlRegister
 302              		.section	.text.PWM_motor_ReadCapture,"ax",%progbits
 303              		.align	2
 304              		.global	PWM_motor_ReadCapture
 305              		.thumb
 306              		.thumb_func
 307              		.type	PWM_motor_ReadCapture, %function
 308              	PWM_motor_ReadCapture:
 309              	.LFB14:
 768:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 769:.\Generated_Source\PSoC5/PWM_motor.c **** 
 770:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* (PWM_motor_UseControl) */
 771:.\Generated_Source\PSoC5/PWM_motor.c **** 
 772:.\Generated_Source\PSoC5/PWM_motor.c **** 
 773:.\Generated_Source\PSoC5/PWM_motor.c **** #if (!PWM_motor_UsingFixedFunction)
 774:.\Generated_Source\PSoC5/PWM_motor.c **** 
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 20


 775:.\Generated_Source\PSoC5/PWM_motor.c **** 
 776:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_ReadCapture
 778:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 779:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 780:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 781:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Reads the capture value from the capture FIFO.
 782:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 783:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 784:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 785:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 786:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 787:.\Generated_Source\PSoC5/PWM_motor.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 789:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC5/PWM_motor.c ****     uint16 PWM_motor_ReadCapture(void) 
 791:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 310              		.loc 1 791 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 792:.\Generated_Source\PSoC5/PWM_motor.c ****         return (CY_GET_REG16(PWM_motor_CAPTURE_LSB_PTR));
 315              		.loc 1 792 0
 316 0000 014B     		ldr	r3, .L35
 317 0002 1888     		ldrh	r0, [r3]
 793:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 318              		.loc 1 793 0
 319 0004 80B2     		uxth	r0, r0
 320 0006 7047     		bx	lr
 321              	.L36:
 322              		.align	2
 323              	.L35:
 324 0008 A8680040 		.word	1073768616
 325              		.cfi_endproc
 326              	.LFE14:
 327              		.size	PWM_motor_ReadCapture, .-PWM_motor_ReadCapture
 328              		.section	.text.PWM_motor_ClearFIFO,"ax",%progbits
 329              		.align	2
 330              		.global	PWM_motor_ClearFIFO
 331              		.thumb
 332              		.thumb_func
 333              		.type	PWM_motor_ClearFIFO, %function
 334              	PWM_motor_ClearFIFO:
 335              	.LFB6:
 454:.\Generated_Source\PSoC5/PWM_motor.c ****             while(0u != (PWM_motor_ReadStatusRegister() & PWM_motor_STATUS_FIFONEMPTY))
 336              		.loc 1 454 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340 0000 08B5     		push	{r3, lr}
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 3, -8
 343              		.cfi_offset 14, -4
 455:.\Generated_Source\PSoC5/PWM_motor.c ****             {
 344              		.loc 1 455 0
 345 0002 01E0     		b	.L38
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 21


 346              	.L39:
 457:.\Generated_Source\PSoC5/PWM_motor.c ****             }
 347              		.loc 1 457 0
 348 0004 FFF7FEFF 		bl	PWM_motor_ReadCapture
 349              	.LVL7:
 350              	.L38:
 455:.\Generated_Source\PSoC5/PWM_motor.c ****             {
 351              		.loc 1 455 0
 352 0008 FFF7FEFF 		bl	PWM_motor_ReadStatusRegister
 353              	.LVL8:
 354 000c 10F0100F 		tst	r0, #16
 355 0010 F8D1     		bne	.L39
 459:.\Generated_Source\PSoC5/PWM_motor.c **** 
 356              		.loc 1 459 0
 357 0012 08BD     		pop	{r3, pc}
 358              		.cfi_endproc
 359              	.LFE6:
 360              		.size	PWM_motor_ClearFIFO, .-PWM_motor_ClearFIFO
 361              		.section	.text.PWM_motor_Init,"ax",%progbits
 362              		.align	2
 363              		.global	PWM_motor_Init
 364              		.thumb
 365              		.thumb_func
 366              		.type	PWM_motor_Init, %function
 367              	PWM_motor_Init:
 368              	.LFB1:
  85:.\Generated_Source\PSoC5/PWM_motor.c ****     #if (PWM_motor_UsingFixedFunction || PWM_motor_UseControl)
 369              		.loc 1 85 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373 0000 10B5     		push	{r4, lr}
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 4, -8
 376              		.cfi_offset 14, -4
 117:.\Generated_Source\PSoC5/PWM_motor.c ****                 ((uint8)(~PWM_motor_CTRL_CMPMODE1_MASK));
 377              		.loc 1 117 0
 378 0002 164A     		ldr	r2, .L43
 379 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 380 0006 03F0C003 		and	r3, r3, #192
 381              	.LVL9:
 119:.\Generated_Source\PSoC5/PWM_motor.c ****                                    PWM_motor_DEFAULT_COMPARE1_MODE;
 382              		.loc 1 119 0
 383 000a 43F00903 		orr	r3, r3, #9
 384              	.LVL10:
 385 000e 1370     		strb	r3, [r2]
 129:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_AUX_CONTROLDP1 |= (PWM_motor_AUX_CTRL_FIFO0_CLR);
 386              		.loc 1 129 0
 387 0010 2032     		adds	r2, r2, #32
 388 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 389 0014 43F00103 		orr	r3, r3, #1
 390 0018 1370     		strb	r3, [r2]
 130:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_Resolution == 8) */
 391              		.loc 1 130 0
 392 001a 114C     		ldr	r4, .L43+4
 393 001c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 394 001e 43F00103 		orr	r3, r3, #1
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 22


 395 0022 2370     		strb	r3, [r4]
 133:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (!PWM_motor_UsingFixedFunction) */
 396              		.loc 1 133 0
 397 0024 40F27750 		movw	r0, #1399
 398 0028 FFF7FEFF 		bl	PWM_motor_WriteCounter
 399              	.LVL11:
 136:.\Generated_Source\PSoC5/PWM_motor.c **** 
 400              		.loc 1 136 0
 401 002c 40F27750 		movw	r0, #1399
 402 0030 FFF7FEFF 		bl	PWM_motor_WritePeriod
 403              	.LVL12:
 141:.\Generated_Source\PSoC5/PWM_motor.c ****             PWM_motor_WriteCompare2(PWM_motor_INIT_COMPARE_VALUE2);
 404              		.loc 1 141 0
 405 0034 0020     		movs	r0, #0
 406 0036 FFF7FEFF 		bl	PWM_motor_WriteCompare1
 407              	.LVL13:
 142:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UseOneCompareMode) */
 408              		.loc 1 142 0
 409 003a 0020     		movs	r0, #0
 410 003c FFF7FEFF 		bl	PWM_motor_WriteCompare2
 411              	.LVL14:
 154:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UseStatus || PWM_motor_UsingFixedFunction) */
 412              		.loc 1 154 0
 413 0040 0020     		movs	r0, #0
 414 0042 FFF7FEFF 		bl	PWM_motor_SetInterruptMode
 415              	.LVL15:
 167:.\Generated_Source\PSoC5/PWM_motor.c ****             /* Use the interrupt output of the status register for IRQ output */
 416              		.loc 1 167 0
 417 0046 FFF7FEFF 		bl	CyEnterCriticalSection
 418              	.LVL16:
 169:.\Generated_Source\PSoC5/PWM_motor.c **** 
 419              		.loc 1 169 0
 420 004a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 421 004c 43F01003 		orr	r3, r3, #16
 422 0050 2370     		strb	r3, [r4]
 172:.\Generated_Source\PSoC5/PWM_motor.c **** 
 423              		.loc 1 172 0
 424 0052 FFF7FEFF 		bl	CyExitCriticalSection
 425              	.LVL17:
 176:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UseStatus) */
 426              		.loc 1 176 0
 427 0056 FFF7FEFF 		bl	PWM_motor_ClearFIFO
 428              	.LVL18:
 429 005a 10BD     		pop	{r4, pc}
 430              	.L44:
 431              		.align	2
 432              	.L43:
 433 005c 74640040 		.word	1073767540
 434 0060 95640040 		.word	1073767573
 435              		.cfi_endproc
 436              	.LFE1:
 437              		.size	PWM_motor_Init, .-PWM_motor_Init
 438              		.section	.text.PWM_motor_Start,"ax",%progbits
 439              		.align	2
 440              		.global	PWM_motor_Start
 441              		.thumb
 442              		.thumb_func
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 23


 443              		.type	PWM_motor_Start, %function
 444              	PWM_motor_Start:
 445              	.LFB0:
  56:.\Generated_Source\PSoC5/PWM_motor.c ****     /* If not Initialized then initialize all required hardware and software */
 446              		.loc 1 56 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450 0000 08B5     		push	{r3, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 3, -8
 453              		.cfi_offset 14, -4
  58:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 454              		.loc 1 58 0
 455 0002 054B     		ldr	r3, .L48
 456 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 457 0006 23B9     		cbnz	r3, .L46
  60:.\Generated_Source\PSoC5/PWM_motor.c ****         PWM_motor_initVar = 1u;
 458              		.loc 1 60 0
 459 0008 FFF7FEFF 		bl	PWM_motor_Init
 460              	.LVL19:
  61:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 461              		.loc 1 61 0
 462 000c 0122     		movs	r2, #1
 463 000e 024B     		ldr	r3, .L48
 464 0010 1A70     		strb	r2, [r3]
 465              	.L46:
  63:.\Generated_Source\PSoC5/PWM_motor.c **** 
 466              		.loc 1 63 0
 467 0012 FFF7FEFF 		bl	PWM_motor_Enable
 468              	.LVL20:
 469 0016 08BD     		pop	{r3, pc}
 470              	.L49:
 471              		.align	2
 472              	.L48:
 473 0018 00000000 		.word	.LANCHOR0
 474              		.cfi_endproc
 475              	.LFE0:
 476              		.size	PWM_motor_Start, .-PWM_motor_Start
 477              		.section	.text.PWM_motor_ReadCompare1,"ax",%progbits
 478              		.align	2
 479              		.global	PWM_motor_ReadCompare1
 480              		.thumb
 481              		.thumb_func
 482              		.type	PWM_motor_ReadCompare1, %function
 483              	PWM_motor_ReadCompare1:
 484              	.LFB15:
 794:.\Generated_Source\PSoC5/PWM_motor.c **** 
 795:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* (!PWM_motor_UsingFixedFunction) */
 796:.\Generated_Source\PSoC5/PWM_motor.c **** 
 797:.\Generated_Source\PSoC5/PWM_motor.c **** 
 798:.\Generated_Source\PSoC5/PWM_motor.c **** #if (PWM_motor_UseOneCompareMode)
 799:.\Generated_Source\PSoC5/PWM_motor.c **** 
 800:.\Generated_Source\PSoC5/PWM_motor.c **** 
 801:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_ReadCompare
 803:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 24


 804:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 805:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 806:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:.\Generated_Source\PSoC5/PWM_motor.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 809:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 810:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 811:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 812:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 813:.\Generated_Source\PSoC5/PWM_motor.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 815:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC5/PWM_motor.c ****     uint16 PWM_motor_ReadCompare(void) 
 817:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 818:.\Generated_Source\PSoC5/PWM_motor.c ****         #if(PWM_motor_UsingFixedFunction)
 819:.\Generated_Source\PSoC5/PWM_motor.c ****             return ((uint16)CY_GET_REG16(PWM_motor_COMPARE1_LSB_PTR));
 820:.\Generated_Source\PSoC5/PWM_motor.c ****         #else
 821:.\Generated_Source\PSoC5/PWM_motor.c ****             return (CY_GET_REG16(PWM_motor_COMPARE1_LSB_PTR));
 822:.\Generated_Source\PSoC5/PWM_motor.c ****         #endif /* (PWM_motor_UsingFixedFunction) */
 823:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 824:.\Generated_Source\PSoC5/PWM_motor.c **** 
 825:.\Generated_Source\PSoC5/PWM_motor.c **** #else
 826:.\Generated_Source\PSoC5/PWM_motor.c **** 
 827:.\Generated_Source\PSoC5/PWM_motor.c **** 
 828:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 829:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_ReadCompare1
 830:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 832:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 833:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 835:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 836:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 837:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 838:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 839:.\Generated_Source\PSoC5/PWM_motor.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 841:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC5/PWM_motor.c ****     uint16 PWM_motor_ReadCompare1(void) 
 843:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 485              		.loc 1 843 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 844:.\Generated_Source\PSoC5/PWM_motor.c ****         return (CY_GET_REG16(PWM_motor_COMPARE1_LSB_PTR));
 490              		.loc 1 844 0
 491 0000 014B     		ldr	r3, .L51
 492 0002 1888     		ldrh	r0, [r3]
 845:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 493              		.loc 1 845 0
 494 0004 80B2     		uxth	r0, r0
 495 0006 7047     		bx	lr
 496              	.L52:
 497              		.align	2
 498              	.L51:
 499 0008 48680040 		.word	1073768520
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 25


 500              		.cfi_endproc
 501              	.LFE15:
 502              		.size	PWM_motor_ReadCompare1, .-PWM_motor_ReadCompare1
 503              		.section	.text.PWM_motor_ReadCompare2,"ax",%progbits
 504              		.align	2
 505              		.global	PWM_motor_ReadCompare2
 506              		.thumb
 507              		.thumb_func
 508              		.type	PWM_motor_ReadCompare2, %function
 509              	PWM_motor_ReadCompare2:
 510              	.LFB16:
 846:.\Generated_Source\PSoC5/PWM_motor.c **** 
 847:.\Generated_Source\PSoC5/PWM_motor.c **** 
 848:.\Generated_Source\PSoC5/PWM_motor.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC5/PWM_motor.c ****     * Function Name: PWM_motor_ReadCompare2
 850:.\Generated_Source\PSoC5/PWM_motor.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 852:.\Generated_Source\PSoC5/PWM_motor.c ****     * Summary:
 853:.\Generated_Source\PSoC5/PWM_motor.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 855:.\Generated_Source\PSoC5/PWM_motor.c ****     * Parameters:
 856:.\Generated_Source\PSoC5/PWM_motor.c ****     *  None
 857:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 858:.\Generated_Source\PSoC5/PWM_motor.c ****     * Return:
 859:.\Generated_Source\PSoC5/PWM_motor.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC5/PWM_motor.c ****     *
 861:.\Generated_Source\PSoC5/PWM_motor.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC5/PWM_motor.c ****     uint16 PWM_motor_ReadCompare2(void) 
 863:.\Generated_Source\PSoC5/PWM_motor.c ****     {
 511              		.loc 1 863 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 0, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 864:.\Generated_Source\PSoC5/PWM_motor.c ****         return (CY_GET_REG16(PWM_motor_COMPARE2_LSB_PTR));
 516              		.loc 1 864 0
 517 0000 014B     		ldr	r3, .L54
 518 0002 1888     		ldrh	r0, [r3]
 865:.\Generated_Source\PSoC5/PWM_motor.c ****     }
 519              		.loc 1 865 0
 520 0004 80B2     		uxth	r0, r0
 521 0006 7047     		bx	lr
 522              	.L55:
 523              		.align	2
 524              	.L54:
 525 0008 68680040 		.word	1073768552
 526              		.cfi_endproc
 527              	.LFE16:
 528              		.size	PWM_motor_ReadCompare2, .-PWM_motor_ReadCompare2
 529              		.section	.text.PWM_motor_ReadPeriod,"ax",%progbits
 530              		.align	2
 531              		.global	PWM_motor_ReadPeriod
 532              		.thumb
 533              		.thumb_func
 534              		.type	PWM_motor_ReadPeriod, %function
 535              	PWM_motor_ReadPeriod:
 536              	.LFB17:
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 26


 866:.\Generated_Source\PSoC5/PWM_motor.c **** 
 867:.\Generated_Source\PSoC5/PWM_motor.c **** #endif /* (PWM_motor_UseOneCompareMode) */
 868:.\Generated_Source\PSoC5/PWM_motor.c **** 
 869:.\Generated_Source\PSoC5/PWM_motor.c **** 
 870:.\Generated_Source\PSoC5/PWM_motor.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC5/PWM_motor.c **** * Function Name: PWM_motor_ReadPeriod
 872:.\Generated_Source\PSoC5/PWM_motor.c **** ********************************************************************************
 873:.\Generated_Source\PSoC5/PWM_motor.c **** *
 874:.\Generated_Source\PSoC5/PWM_motor.c **** * Summary:
 875:.\Generated_Source\PSoC5/PWM_motor.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC5/PWM_motor.c **** *
 877:.\Generated_Source\PSoC5/PWM_motor.c **** * Parameters:
 878:.\Generated_Source\PSoC5/PWM_motor.c **** *  None
 879:.\Generated_Source\PSoC5/PWM_motor.c **** *
 880:.\Generated_Source\PSoC5/PWM_motor.c **** * Return:
 881:.\Generated_Source\PSoC5/PWM_motor.c **** *  uint8/16: Period value
 882:.\Generated_Source\PSoC5/PWM_motor.c **** *
 883:.\Generated_Source\PSoC5/PWM_motor.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC5/PWM_motor.c **** uint16 PWM_motor_ReadPeriod(void) 
 885:.\Generated_Source\PSoC5/PWM_motor.c **** {
 537              		.loc 1 885 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 886:.\Generated_Source\PSoC5/PWM_motor.c ****     #if(PWM_motor_UsingFixedFunction)
 887:.\Generated_Source\PSoC5/PWM_motor.c ****         return ((uint16)CY_GET_REG16(PWM_motor_PERIOD_LSB_PTR));
 888:.\Generated_Source\PSoC5/PWM_motor.c ****     #else
 889:.\Generated_Source\PSoC5/PWM_motor.c ****         return (CY_GET_REG16(PWM_motor_PERIOD_LSB_PTR));
 542              		.loc 1 889 0
 543 0000 014B     		ldr	r3, .L57
 544 0002 1888     		ldrh	r0, [r3]
 890:.\Generated_Source\PSoC5/PWM_motor.c ****     #endif /* (PWM_motor_UsingFixedFunction) */
 891:.\Generated_Source\PSoC5/PWM_motor.c **** }
 545              		.loc 1 891 0
 546 0004 80B2     		uxth	r0, r0
 547 0006 7047     		bx	lr
 548              	.L58:
 549              		.align	2
 550              	.L57:
 551 0008 88680040 		.word	1073768584
 552              		.cfi_endproc
 553              	.LFE17:
 554              		.size	PWM_motor_ReadPeriod, .-PWM_motor_ReadPeriod
 555              		.global	PWM_motor_initVar
 556              		.bss
 557              		.set	.LANCHOR0,. + 0
 558              		.type	PWM_motor_initVar, %object
 559              		.size	PWM_motor_initVar, 1
 560              	PWM_motor_initVar:
 561 0000 00       		.space	1
 562              		.text
 563              	.Letext0:
 564              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 565              		.file 3 ".\\Generated_Source\\PSoC5\\CyLib.h"
 566              		.section	.debug_info,"",%progbits
 567              	.Ldebug_info0:
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 27


 568 0000 97030000 		.4byte	0x397
 569 0004 0400     		.2byte	0x4
 570 0006 00000000 		.4byte	.Ldebug_abbrev0
 571 000a 04       		.byte	0x4
 572 000b 01       		.uleb128 0x1
 573 000c B8020000 		.4byte	.LASF42
 574 0010 01       		.byte	0x1
 575 0011 55000000 		.4byte	.LASF43
 576 0015 9A030000 		.4byte	.LASF44
 577 0019 00000000 		.4byte	.Ldebug_ranges0+0
 578 001d 00000000 		.4byte	0
 579 0021 00000000 		.4byte	.Ldebug_line0
 580 0025 02       		.uleb128 0x2
 581 0026 01       		.byte	0x1
 582 0027 06       		.byte	0x6
 583 0028 86030000 		.4byte	.LASF0
 584 002c 02       		.uleb128 0x2
 585 002d 01       		.byte	0x1
 586 002e 08       		.byte	0x8
 587 002f DF000000 		.4byte	.LASF1
 588 0033 02       		.uleb128 0x2
 589 0034 02       		.byte	0x2
 590 0035 05       		.byte	0x5
 591 0036 AE020000 		.4byte	.LASF2
 592 003a 02       		.uleb128 0x2
 593 003b 02       		.byte	0x2
 594 003c 07       		.byte	0x7
 595 003d 42000000 		.4byte	.LASF3
 596 0041 02       		.uleb128 0x2
 597 0042 04       		.byte	0x4
 598 0043 05       		.byte	0x5
 599 0044 59030000 		.4byte	.LASF4
 600 0048 02       		.uleb128 0x2
 601 0049 04       		.byte	0x4
 602 004a 07       		.byte	0x7
 603 004b 02010000 		.4byte	.LASF5
 604 004f 02       		.uleb128 0x2
 605 0050 08       		.byte	0x8
 606 0051 05       		.byte	0x5
 607 0052 83020000 		.4byte	.LASF6
 608 0056 02       		.uleb128 0x2
 609 0057 08       		.byte	0x8
 610 0058 07       		.byte	0x7
 611 0059 C8000000 		.4byte	.LASF7
 612 005d 03       		.uleb128 0x3
 613 005e 04       		.byte	0x4
 614 005f 05       		.byte	0x5
 615 0060 696E7400 		.ascii	"int\000"
 616 0064 02       		.uleb128 0x2
 617 0065 04       		.byte	0x4
 618 0066 07       		.byte	0x7
 619 0067 C1010000 		.4byte	.LASF8
 620 006b 04       		.uleb128 0x4
 621 006c 14010000 		.4byte	.LASF9
 622 0070 02       		.byte	0x2
 623 0071 3801     		.2byte	0x138
 624 0073 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 28


 625 0077 04       		.uleb128 0x4
 626 0078 7E010000 		.4byte	.LASF10
 627 007c 02       		.byte	0x2
 628 007d 3901     		.2byte	0x139
 629 007f 3A000000 		.4byte	0x3a
 630 0083 02       		.uleb128 0x2
 631 0084 04       		.byte	0x4
 632 0085 04       		.byte	0x4
 633 0086 35000000 		.4byte	.LASF11
 634 008a 02       		.uleb128 0x2
 635 008b 08       		.byte	0x8
 636 008c 04       		.byte	0x4
 637 008d 5C010000 		.4byte	.LASF12
 638 0091 02       		.uleb128 0x2
 639 0092 01       		.byte	0x1
 640 0093 08       		.byte	0x8
 641 0094 62030000 		.4byte	.LASF13
 642 0098 04       		.uleb128 0x4
 643 0099 ED000000 		.4byte	.LASF14
 644 009d 02       		.byte	0x2
 645 009e E201     		.2byte	0x1e2
 646 00a0 A4000000 		.4byte	0xa4
 647 00a4 05       		.uleb128 0x5
 648 00a5 6B000000 		.4byte	0x6b
 649 00a9 04       		.uleb128 0x4
 650 00aa 00000000 		.4byte	.LASF15
 651 00ae 02       		.byte	0x2
 652 00af E301     		.2byte	0x1e3
 653 00b1 B5000000 		.4byte	0xb5
 654 00b5 05       		.uleb128 0x5
 655 00b6 77000000 		.4byte	0x77
 656 00ba 02       		.uleb128 0x2
 657 00bb 04       		.byte	0x4
 658 00bc 07       		.byte	0x7
 659 00bd 7A020000 		.4byte	.LASF16
 660 00c1 06       		.uleb128 0x6
 661 00c2 64020000 		.4byte	.LASF17
 662 00c6 01       		.byte	0x1
 663 00c7 C7       		.byte	0xc7
 664 00c8 00000000 		.4byte	.LFB2
 665 00cc 10000000 		.4byte	.LFE2-.LFB2
 666 00d0 01       		.uleb128 0x1
 667 00d1 9C       		.byte	0x9c
 668 00d2 06       		.uleb128 0x6
 669 00d3 9F020000 		.4byte	.LASF18
 670 00d7 01       		.byte	0x1
 671 00d8 E9       		.byte	0xe9
 672 00d9 00000000 		.4byte	.LFB3
 673 00dd 10000000 		.4byte	.LFE3-.LFB3
 674 00e1 01       		.uleb128 0x1
 675 00e2 9C       		.byte	0x9c
 676 00e3 07       		.uleb128 0x7
 677 00e4 7A000000 		.4byte	.LASF19
 678 00e8 01       		.byte	0x1
 679 00e9 9301     		.2byte	0x193
 680 00eb 00000000 		.4byte	.LFB4
 681 00ef 0C000000 		.4byte	.LFE4-.LFB4
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 29


 682 00f3 01       		.uleb128 0x1
 683 00f4 9C       		.byte	0x9c
 684 00f5 08010000 		.4byte	0x108
 685 00f9 08       		.uleb128 0x8
 686 00fa C0000000 		.4byte	.LASF21
 687 00fe 01       		.byte	0x1
 688 00ff 9301     		.2byte	0x193
 689 0101 77000000 		.4byte	0x77
 690 0105 01       		.uleb128 0x1
 691 0106 50       		.byte	0x50
 692 0107 00       		.byte	0
 693 0108 09       		.uleb128 0x9
 694 0109 91000000 		.4byte	.LASF28
 695 010d 01       		.byte	0x1
 696 010e A901     		.2byte	0x1a9
 697 0110 77000000 		.4byte	0x77
 698 0114 00000000 		.4byte	.LFB5
 699 0118 14000000 		.4byte	.LFE5-.LFB5
 700 011c 01       		.uleb128 0x1
 701 011d 9C       		.byte	0x9c
 702 011e 07       		.uleb128 0x7
 703 011f 85010000 		.4byte	.LASF20
 704 0123 01       		.byte	0x1
 705 0124 E201     		.2byte	0x1e2
 706 0126 00000000 		.4byte	.LFB7
 707 012a 0C000000 		.4byte	.LFE7-.LFB7
 708 012e 01       		.uleb128 0x1
 709 012f 9C       		.byte	0x9c
 710 0130 43010000 		.4byte	0x143
 711 0134 08       		.uleb128 0x8
 712 0135 3B000000 		.4byte	.LASF22
 713 0139 01       		.byte	0x1
 714 013a E201     		.2byte	0x1e2
 715 013c 77000000 		.4byte	0x77
 716 0140 01       		.uleb128 0x1
 717 0141 50       		.byte	0x50
 718 0142 00       		.byte	0
 719 0143 07       		.uleb128 0x7
 720 0144 17020000 		.4byte	.LASF23
 721 0148 01       		.byte	0x1
 722 0149 2B02     		.2byte	0x22b
 723 014b 00000000 		.4byte	.LFB8
 724 014f 0C000000 		.4byte	.LFE8-.LFB8
 725 0153 01       		.uleb128 0x1
 726 0154 9C       		.byte	0x9c
 727 0155 68010000 		.4byte	0x168
 728 0159 08       		.uleb128 0x8
 729 015a 92030000 		.4byte	.LASF24
 730 015e 01       		.byte	0x1
 731 015f 2B02     		.2byte	0x22b
 732 0161 77000000 		.4byte	0x77
 733 0165 01       		.uleb128 0x1
 734 0166 50       		.byte	0x50
 735 0167 00       		.byte	0
 736 0168 07       		.uleb128 0x7
 737 0169 2F020000 		.4byte	.LASF25
 738 016d 01       		.byte	0x1
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 30


 739 016e 4802     		.2byte	0x248
 740 0170 00000000 		.4byte	.LFB9
 741 0174 0C000000 		.4byte	.LFE9-.LFB9
 742 0178 01       		.uleb128 0x1
 743 0179 9C       		.byte	0x9c
 744 017a 8D010000 		.4byte	0x18d
 745 017e 08       		.uleb128 0x8
 746 017f 92030000 		.4byte	.LASF24
 747 0183 01       		.byte	0x1
 748 0184 4802     		.2byte	0x248
 749 0186 77000000 		.4byte	0x77
 750 018a 01       		.uleb128 0x1
 751 018b 50       		.byte	0x50
 752 018c 00       		.byte	0
 753 018d 07       		.uleb128 0x7
 754 018e 63010000 		.4byte	.LASF26
 755 0192 01       		.byte	0x1
 756 0193 AC02     		.2byte	0x2ac
 757 0195 00000000 		.4byte	.LFB10
 758 0199 0C000000 		.4byte	.LFE10-.LFB10
 759 019d 01       		.uleb128 0x1
 760 019e 9C       		.byte	0x9c
 761 019f B2010000 		.4byte	0x1b2
 762 01a3 08       		.uleb128 0x8
 763 01a4 91020000 		.4byte	.LASF27
 764 01a8 01       		.byte	0x1
 765 01a9 AC02     		.2byte	0x2ac
 766 01ab 6B000000 		.4byte	0x6b
 767 01af 01       		.uleb128 0x1
 768 01b0 50       		.byte	0x50
 769 01b1 00       		.byte	0
 770 01b2 09       		.uleb128 0x9
 771 01b3 47020000 		.4byte	.LASF29
 772 01b7 01       		.byte	0x1
 773 01b8 C702     		.2byte	0x2c7
 774 01ba 6B000000 		.4byte	0x6b
 775 01be 00000000 		.4byte	.LFB11
 776 01c2 0C000000 		.4byte	.LFE11-.LFB11
 777 01c6 01       		.uleb128 0x1
 778 01c7 9C       		.byte	0x9c
 779 01c8 0A       		.uleb128 0xa
 780 01c9 E3010000 		.4byte	.LASF45
 781 01cd 01       		.byte	0x1
 782 01ce E102     		.2byte	0x2e1
 783 01d0 6B000000 		.4byte	0x6b
 784 01d4 00000000 		.4byte	.LFB12
 785 01d8 0C000000 		.4byte	.LFE12-.LFB12
 786 01dc 01       		.uleb128 0x1
 787 01dd 9C       		.byte	0x9c
 788 01de F1010000 		.4byte	0x1f1
 789 01e2 0B       		.uleb128 0xb
 790 01e3 1C000000 		.4byte	.LASF35
 791 01e7 01       		.byte	0x1
 792 01e8 E302     		.2byte	0x2e3
 793 01ea 6B000000 		.4byte	0x6b
 794 01ee 01       		.uleb128 0x1
 795 01ef 50       		.byte	0x50
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 31


 796 01f0 00       		.byte	0
 797 01f1 07       		.uleb128 0x7
 798 01f2 67030000 		.4byte	.LASF30
 799 01f6 01       		.byte	0x1
 800 01f7 FD02     		.2byte	0x2fd
 801 01f9 00000000 		.4byte	.LFB13
 802 01fd 0C000000 		.4byte	.LFE13-.LFB13
 803 0201 01       		.uleb128 0x1
 804 0202 9C       		.byte	0x9c
 805 0203 16020000 		.4byte	0x216
 806 0207 08       		.uleb128 0x8
 807 0208 51030000 		.4byte	.LASF31
 808 020c 01       		.byte	0x1
 809 020d FD02     		.2byte	0x2fd
 810 020f 6B000000 		.4byte	0x6b
 811 0213 01       		.uleb128 0x1
 812 0214 50       		.byte	0x50
 813 0215 00       		.byte	0
 814 0216 09       		.uleb128 0x9
 815 0217 06000000 		.4byte	.LASF32
 816 021b 01       		.byte	0x1
 817 021c 1603     		.2byte	0x316
 818 021e 77000000 		.4byte	0x77
 819 0222 00000000 		.4byte	.LFB14
 820 0226 0C000000 		.4byte	.LFE14-.LFB14
 821 022a 01       		.uleb128 0x1
 822 022b 9C       		.byte	0x9c
 823 022c 07       		.uleb128 0x7
 824 022d 1A010000 		.4byte	.LASF33
 825 0231 01       		.byte	0x1
 826 0232 C501     		.2byte	0x1c5
 827 0234 00000000 		.4byte	.LFB6
 828 0238 14000000 		.4byte	.LFE6-.LFB6
 829 023c 01       		.uleb128 0x1
 830 023d 9C       		.byte	0x9c
 831 023e 55020000 		.4byte	0x255
 832 0242 0C       		.uleb128 0xc
 833 0243 08000000 		.4byte	.LVL7
 834 0247 16020000 		.4byte	0x216
 835 024b 0C       		.uleb128 0xc
 836 024c 0C000000 		.4byte	.LVL8
 837 0250 B2010000 		.4byte	0x1b2
 838 0254 00       		.byte	0
 839 0255 0D       		.uleb128 0xd
 840 0256 B2010000 		.4byte	.LASF34
 841 025a 01       		.byte	0x1
 842 025b 54       		.byte	0x54
 843 025c 00000000 		.4byte	.LFB1
 844 0260 64000000 		.4byte	.LFE1-.LFB1
 845 0264 01       		.uleb128 0x1
 846 0265 9C       		.byte	0x9c
 847 0266 07030000 		.4byte	0x307
 848 026a 0E       		.uleb128 0xe
 849 026b 75020000 		.4byte	.LASF36
 850 026f 01       		.byte	0x1
 851 0270 57       		.byte	0x57
 852 0271 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 32


 853 0275 00000000 		.4byte	.LLST0
 854 0279 0E       		.uleb128 0xe
 855 027a A7000000 		.4byte	.LASF37
 856 027e 01       		.byte	0x1
 857 027f 5D       		.byte	0x5d
 858 0280 6B000000 		.4byte	0x6b
 859 0284 13000000 		.4byte	.LLST1
 860 0288 0F       		.uleb128 0xf
 861 0289 2C000000 		.4byte	.LVL11
 862 028d E3000000 		.4byte	0xe3
 863 0291 9D020000 		.4byte	0x29d
 864 0295 10       		.uleb128 0x10
 865 0296 01       		.uleb128 0x1
 866 0297 50       		.byte	0x50
 867 0298 03       		.uleb128 0x3
 868 0299 0A       		.byte	0xa
 869 029a 7705     		.2byte	0x577
 870 029c 00       		.byte	0
 871 029d 0F       		.uleb128 0xf
 872 029e 34000000 		.4byte	.LVL12
 873 02a2 1E010000 		.4byte	0x11e
 874 02a6 B2020000 		.4byte	0x2b2
 875 02aa 10       		.uleb128 0x10
 876 02ab 01       		.uleb128 0x1
 877 02ac 50       		.byte	0x50
 878 02ad 03       		.uleb128 0x3
 879 02ae 0A       		.byte	0xa
 880 02af 7705     		.2byte	0x577
 881 02b1 00       		.byte	0
 882 02b2 0F       		.uleb128 0xf
 883 02b3 3A000000 		.4byte	.LVL13
 884 02b7 43010000 		.4byte	0x143
 885 02bb C5020000 		.4byte	0x2c5
 886 02bf 10       		.uleb128 0x10
 887 02c0 01       		.uleb128 0x1
 888 02c1 50       		.byte	0x50
 889 02c2 01       		.uleb128 0x1
 890 02c3 30       		.byte	0x30
 891 02c4 00       		.byte	0
 892 02c5 0F       		.uleb128 0xf
 893 02c6 40000000 		.4byte	.LVL14
 894 02ca 68010000 		.4byte	0x168
 895 02ce D8020000 		.4byte	0x2d8
 896 02d2 10       		.uleb128 0x10
 897 02d3 01       		.uleb128 0x1
 898 02d4 50       		.byte	0x50
 899 02d5 01       		.uleb128 0x1
 900 02d6 30       		.byte	0x30
 901 02d7 00       		.byte	0
 902 02d8 0F       		.uleb128 0xf
 903 02d9 46000000 		.4byte	.LVL15
 904 02dd 8D010000 		.4byte	0x18d
 905 02e1 EB020000 		.4byte	0x2eb
 906 02e5 10       		.uleb128 0x10
 907 02e6 01       		.uleb128 0x1
 908 02e7 50       		.byte	0x50
 909 02e8 01       		.uleb128 0x1
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 33


 910 02e9 30       		.byte	0x30
 911 02ea 00       		.byte	0
 912 02eb 0C       		.uleb128 0xc
 913 02ec 4A000000 		.4byte	.LVL16
 914 02f0 82030000 		.4byte	0x382
 915 02f4 0C       		.uleb128 0xc
 916 02f5 56000000 		.4byte	.LVL17
 917 02f9 8D030000 		.4byte	0x38d
 918 02fd 0C       		.uleb128 0xc
 919 02fe 5A000000 		.4byte	.LVL18
 920 0302 2C020000 		.4byte	0x22c
 921 0306 00       		.byte	0
 922 0307 0D       		.uleb128 0xd
 923 0308 F2000000 		.4byte	.LASF38
 924 030c 01       		.byte	0x1
 925 030d 37       		.byte	0x37
 926 030e 00000000 		.4byte	.LFB0
 927 0312 1C000000 		.4byte	.LFE0-.LFB0
 928 0316 01       		.uleb128 0x1
 929 0317 9C       		.byte	0x9c
 930 0318 2F030000 		.4byte	0x32f
 931 031c 0C       		.uleb128 0xc
 932 031d 0C000000 		.4byte	.LVL19
 933 0321 55020000 		.4byte	0x255
 934 0325 0C       		.uleb128 0xc
 935 0326 16000000 		.4byte	.LVL20
 936 032a C1000000 		.4byte	0xc1
 937 032e 00       		.byte	0
 938 032f 09       		.uleb128 0x9
 939 0330 2E010000 		.4byte	.LASF39
 940 0334 01       		.byte	0x1
 941 0335 4A03     		.2byte	0x34a
 942 0337 77000000 		.4byte	0x77
 943 033b 00000000 		.4byte	.LFB15
 944 033f 0C000000 		.4byte	.LFE15-.LFB15
 945 0343 01       		.uleb128 0x1
 946 0344 9C       		.byte	0x9c
 947 0345 09       		.uleb128 0x9
 948 0346 45010000 		.4byte	.LASF40
 949 034a 01       		.byte	0x1
 950 034b 5E03     		.2byte	0x35e
 951 034d 77000000 		.4byte	0x77
 952 0351 00000000 		.4byte	.LFB16
 953 0355 0C000000 		.4byte	.LFE16-.LFB16
 954 0359 01       		.uleb128 0x1
 955 035a 9C       		.byte	0x9c
 956 035b 09       		.uleb128 0x9
 957 035c CE010000 		.4byte	.LASF41
 958 0360 01       		.byte	0x1
 959 0361 7403     		.2byte	0x374
 960 0363 77000000 		.4byte	0x77
 961 0367 00000000 		.4byte	.LFB17
 962 036b 0C000000 		.4byte	.LFE17-.LFB17
 963 036f 01       		.uleb128 0x1
 964 0370 9C       		.byte	0x9c
 965 0371 11       		.uleb128 0x11
 966 0372 23000000 		.4byte	.LASF46
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 34


 967 0376 01       		.byte	0x1
 968 0377 20       		.byte	0x20
 969 0378 6B000000 		.4byte	0x6b
 970 037c 05       		.uleb128 0x5
 971 037d 03       		.byte	0x3
 972 037e 00000000 		.4byte	PWM_motor_initVar
 973 0382 12       		.uleb128 0x12
 974 0383 9B010000 		.4byte	.LASF47
 975 0387 03       		.byte	0x3
 976 0388 7E       		.byte	0x7e
 977 0389 6B000000 		.4byte	0x6b
 978 038d 13       		.uleb128 0x13
 979 038e 01020000 		.4byte	.LASF48
 980 0392 03       		.byte	0x3
 981 0393 7F       		.byte	0x7f
 982 0394 14       		.uleb128 0x14
 983 0395 6B000000 		.4byte	0x6b
 984 0399 00       		.byte	0
 985 039a 00       		.byte	0
 986              		.section	.debug_abbrev,"",%progbits
 987              	.Ldebug_abbrev0:
 988 0000 01       		.uleb128 0x1
 989 0001 11       		.uleb128 0x11
 990 0002 01       		.byte	0x1
 991 0003 25       		.uleb128 0x25
 992 0004 0E       		.uleb128 0xe
 993 0005 13       		.uleb128 0x13
 994 0006 0B       		.uleb128 0xb
 995 0007 03       		.uleb128 0x3
 996 0008 0E       		.uleb128 0xe
 997 0009 1B       		.uleb128 0x1b
 998 000a 0E       		.uleb128 0xe
 999 000b 55       		.uleb128 0x55
 1000 000c 17       		.uleb128 0x17
 1001 000d 11       		.uleb128 0x11
 1002 000e 01       		.uleb128 0x1
 1003 000f 10       		.uleb128 0x10
 1004 0010 17       		.uleb128 0x17
 1005 0011 00       		.byte	0
 1006 0012 00       		.byte	0
 1007 0013 02       		.uleb128 0x2
 1008 0014 24       		.uleb128 0x24
 1009 0015 00       		.byte	0
 1010 0016 0B       		.uleb128 0xb
 1011 0017 0B       		.uleb128 0xb
 1012 0018 3E       		.uleb128 0x3e
 1013 0019 0B       		.uleb128 0xb
 1014 001a 03       		.uleb128 0x3
 1015 001b 0E       		.uleb128 0xe
 1016 001c 00       		.byte	0
 1017 001d 00       		.byte	0
 1018 001e 03       		.uleb128 0x3
 1019 001f 24       		.uleb128 0x24
 1020 0020 00       		.byte	0
 1021 0021 0B       		.uleb128 0xb
 1022 0022 0B       		.uleb128 0xb
 1023 0023 3E       		.uleb128 0x3e
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 35


 1024 0024 0B       		.uleb128 0xb
 1025 0025 03       		.uleb128 0x3
 1026 0026 08       		.uleb128 0x8
 1027 0027 00       		.byte	0
 1028 0028 00       		.byte	0
 1029 0029 04       		.uleb128 0x4
 1030 002a 16       		.uleb128 0x16
 1031 002b 00       		.byte	0
 1032 002c 03       		.uleb128 0x3
 1033 002d 0E       		.uleb128 0xe
 1034 002e 3A       		.uleb128 0x3a
 1035 002f 0B       		.uleb128 0xb
 1036 0030 3B       		.uleb128 0x3b
 1037 0031 05       		.uleb128 0x5
 1038 0032 49       		.uleb128 0x49
 1039 0033 13       		.uleb128 0x13
 1040 0034 00       		.byte	0
 1041 0035 00       		.byte	0
 1042 0036 05       		.uleb128 0x5
 1043 0037 35       		.uleb128 0x35
 1044 0038 00       		.byte	0
 1045 0039 49       		.uleb128 0x49
 1046 003a 13       		.uleb128 0x13
 1047 003b 00       		.byte	0
 1048 003c 00       		.byte	0
 1049 003d 06       		.uleb128 0x6
 1050 003e 2E       		.uleb128 0x2e
 1051 003f 00       		.byte	0
 1052 0040 3F       		.uleb128 0x3f
 1053 0041 19       		.uleb128 0x19
 1054 0042 03       		.uleb128 0x3
 1055 0043 0E       		.uleb128 0xe
 1056 0044 3A       		.uleb128 0x3a
 1057 0045 0B       		.uleb128 0xb
 1058 0046 3B       		.uleb128 0x3b
 1059 0047 0B       		.uleb128 0xb
 1060 0048 27       		.uleb128 0x27
 1061 0049 19       		.uleb128 0x19
 1062 004a 11       		.uleb128 0x11
 1063 004b 01       		.uleb128 0x1
 1064 004c 12       		.uleb128 0x12
 1065 004d 06       		.uleb128 0x6
 1066 004e 40       		.uleb128 0x40
 1067 004f 18       		.uleb128 0x18
 1068 0050 9742     		.uleb128 0x2117
 1069 0052 19       		.uleb128 0x19
 1070 0053 00       		.byte	0
 1071 0054 00       		.byte	0
 1072 0055 07       		.uleb128 0x7
 1073 0056 2E       		.uleb128 0x2e
 1074 0057 01       		.byte	0x1
 1075 0058 3F       		.uleb128 0x3f
 1076 0059 19       		.uleb128 0x19
 1077 005a 03       		.uleb128 0x3
 1078 005b 0E       		.uleb128 0xe
 1079 005c 3A       		.uleb128 0x3a
 1080 005d 0B       		.uleb128 0xb
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 36


 1081 005e 3B       		.uleb128 0x3b
 1082 005f 05       		.uleb128 0x5
 1083 0060 27       		.uleb128 0x27
 1084 0061 19       		.uleb128 0x19
 1085 0062 11       		.uleb128 0x11
 1086 0063 01       		.uleb128 0x1
 1087 0064 12       		.uleb128 0x12
 1088 0065 06       		.uleb128 0x6
 1089 0066 40       		.uleb128 0x40
 1090 0067 18       		.uleb128 0x18
 1091 0068 9742     		.uleb128 0x2117
 1092 006a 19       		.uleb128 0x19
 1093 006b 01       		.uleb128 0x1
 1094 006c 13       		.uleb128 0x13
 1095 006d 00       		.byte	0
 1096 006e 00       		.byte	0
 1097 006f 08       		.uleb128 0x8
 1098 0070 05       		.uleb128 0x5
 1099 0071 00       		.byte	0
 1100 0072 03       		.uleb128 0x3
 1101 0073 0E       		.uleb128 0xe
 1102 0074 3A       		.uleb128 0x3a
 1103 0075 0B       		.uleb128 0xb
 1104 0076 3B       		.uleb128 0x3b
 1105 0077 05       		.uleb128 0x5
 1106 0078 49       		.uleb128 0x49
 1107 0079 13       		.uleb128 0x13
 1108 007a 02       		.uleb128 0x2
 1109 007b 18       		.uleb128 0x18
 1110 007c 00       		.byte	0
 1111 007d 00       		.byte	0
 1112 007e 09       		.uleb128 0x9
 1113 007f 2E       		.uleb128 0x2e
 1114 0080 00       		.byte	0
 1115 0081 3F       		.uleb128 0x3f
 1116 0082 19       		.uleb128 0x19
 1117 0083 03       		.uleb128 0x3
 1118 0084 0E       		.uleb128 0xe
 1119 0085 3A       		.uleb128 0x3a
 1120 0086 0B       		.uleb128 0xb
 1121 0087 3B       		.uleb128 0x3b
 1122 0088 05       		.uleb128 0x5
 1123 0089 27       		.uleb128 0x27
 1124 008a 19       		.uleb128 0x19
 1125 008b 49       		.uleb128 0x49
 1126 008c 13       		.uleb128 0x13
 1127 008d 11       		.uleb128 0x11
 1128 008e 01       		.uleb128 0x1
 1129 008f 12       		.uleb128 0x12
 1130 0090 06       		.uleb128 0x6
 1131 0091 40       		.uleb128 0x40
 1132 0092 18       		.uleb128 0x18
 1133 0093 9742     		.uleb128 0x2117
 1134 0095 19       		.uleb128 0x19
 1135 0096 00       		.byte	0
 1136 0097 00       		.byte	0
 1137 0098 0A       		.uleb128 0xa
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 37


 1138 0099 2E       		.uleb128 0x2e
 1139 009a 01       		.byte	0x1
 1140 009b 3F       		.uleb128 0x3f
 1141 009c 19       		.uleb128 0x19
 1142 009d 03       		.uleb128 0x3
 1143 009e 0E       		.uleb128 0xe
 1144 009f 3A       		.uleb128 0x3a
 1145 00a0 0B       		.uleb128 0xb
 1146 00a1 3B       		.uleb128 0x3b
 1147 00a2 05       		.uleb128 0x5
 1148 00a3 27       		.uleb128 0x27
 1149 00a4 19       		.uleb128 0x19
 1150 00a5 49       		.uleb128 0x49
 1151 00a6 13       		.uleb128 0x13
 1152 00a7 11       		.uleb128 0x11
 1153 00a8 01       		.uleb128 0x1
 1154 00a9 12       		.uleb128 0x12
 1155 00aa 06       		.uleb128 0x6
 1156 00ab 40       		.uleb128 0x40
 1157 00ac 18       		.uleb128 0x18
 1158 00ad 9742     		.uleb128 0x2117
 1159 00af 19       		.uleb128 0x19
 1160 00b0 01       		.uleb128 0x1
 1161 00b1 13       		.uleb128 0x13
 1162 00b2 00       		.byte	0
 1163 00b3 00       		.byte	0
 1164 00b4 0B       		.uleb128 0xb
 1165 00b5 34       		.uleb128 0x34
 1166 00b6 00       		.byte	0
 1167 00b7 03       		.uleb128 0x3
 1168 00b8 0E       		.uleb128 0xe
 1169 00b9 3A       		.uleb128 0x3a
 1170 00ba 0B       		.uleb128 0xb
 1171 00bb 3B       		.uleb128 0x3b
 1172 00bc 05       		.uleb128 0x5
 1173 00bd 49       		.uleb128 0x49
 1174 00be 13       		.uleb128 0x13
 1175 00bf 02       		.uleb128 0x2
 1176 00c0 18       		.uleb128 0x18
 1177 00c1 00       		.byte	0
 1178 00c2 00       		.byte	0
 1179 00c3 0C       		.uleb128 0xc
 1180 00c4 898201   		.uleb128 0x4109
 1181 00c7 00       		.byte	0
 1182 00c8 11       		.uleb128 0x11
 1183 00c9 01       		.uleb128 0x1
 1184 00ca 31       		.uleb128 0x31
 1185 00cb 13       		.uleb128 0x13
 1186 00cc 00       		.byte	0
 1187 00cd 00       		.byte	0
 1188 00ce 0D       		.uleb128 0xd
 1189 00cf 2E       		.uleb128 0x2e
 1190 00d0 01       		.byte	0x1
 1191 00d1 3F       		.uleb128 0x3f
 1192 00d2 19       		.uleb128 0x19
 1193 00d3 03       		.uleb128 0x3
 1194 00d4 0E       		.uleb128 0xe
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 38


 1195 00d5 3A       		.uleb128 0x3a
 1196 00d6 0B       		.uleb128 0xb
 1197 00d7 3B       		.uleb128 0x3b
 1198 00d8 0B       		.uleb128 0xb
 1199 00d9 27       		.uleb128 0x27
 1200 00da 19       		.uleb128 0x19
 1201 00db 11       		.uleb128 0x11
 1202 00dc 01       		.uleb128 0x1
 1203 00dd 12       		.uleb128 0x12
 1204 00de 06       		.uleb128 0x6
 1205 00df 40       		.uleb128 0x40
 1206 00e0 18       		.uleb128 0x18
 1207 00e1 9742     		.uleb128 0x2117
 1208 00e3 19       		.uleb128 0x19
 1209 00e4 01       		.uleb128 0x1
 1210 00e5 13       		.uleb128 0x13
 1211 00e6 00       		.byte	0
 1212 00e7 00       		.byte	0
 1213 00e8 0E       		.uleb128 0xe
 1214 00e9 34       		.uleb128 0x34
 1215 00ea 00       		.byte	0
 1216 00eb 03       		.uleb128 0x3
 1217 00ec 0E       		.uleb128 0xe
 1218 00ed 3A       		.uleb128 0x3a
 1219 00ee 0B       		.uleb128 0xb
 1220 00ef 3B       		.uleb128 0x3b
 1221 00f0 0B       		.uleb128 0xb
 1222 00f1 49       		.uleb128 0x49
 1223 00f2 13       		.uleb128 0x13
 1224 00f3 02       		.uleb128 0x2
 1225 00f4 17       		.uleb128 0x17
 1226 00f5 00       		.byte	0
 1227 00f6 00       		.byte	0
 1228 00f7 0F       		.uleb128 0xf
 1229 00f8 898201   		.uleb128 0x4109
 1230 00fb 01       		.byte	0x1
 1231 00fc 11       		.uleb128 0x11
 1232 00fd 01       		.uleb128 0x1
 1233 00fe 31       		.uleb128 0x31
 1234 00ff 13       		.uleb128 0x13
 1235 0100 01       		.uleb128 0x1
 1236 0101 13       		.uleb128 0x13
 1237 0102 00       		.byte	0
 1238 0103 00       		.byte	0
 1239 0104 10       		.uleb128 0x10
 1240 0105 8A8201   		.uleb128 0x410a
 1241 0108 00       		.byte	0
 1242 0109 02       		.uleb128 0x2
 1243 010a 18       		.uleb128 0x18
 1244 010b 9142     		.uleb128 0x2111
 1245 010d 18       		.uleb128 0x18
 1246 010e 00       		.byte	0
 1247 010f 00       		.byte	0
 1248 0110 11       		.uleb128 0x11
 1249 0111 34       		.uleb128 0x34
 1250 0112 00       		.byte	0
 1251 0113 03       		.uleb128 0x3
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 39


 1252 0114 0E       		.uleb128 0xe
 1253 0115 3A       		.uleb128 0x3a
 1254 0116 0B       		.uleb128 0xb
 1255 0117 3B       		.uleb128 0x3b
 1256 0118 0B       		.uleb128 0xb
 1257 0119 49       		.uleb128 0x49
 1258 011a 13       		.uleb128 0x13
 1259 011b 3F       		.uleb128 0x3f
 1260 011c 19       		.uleb128 0x19
 1261 011d 02       		.uleb128 0x2
 1262 011e 18       		.uleb128 0x18
 1263 011f 00       		.byte	0
 1264 0120 00       		.byte	0
 1265 0121 12       		.uleb128 0x12
 1266 0122 2E       		.uleb128 0x2e
 1267 0123 00       		.byte	0
 1268 0124 3F       		.uleb128 0x3f
 1269 0125 19       		.uleb128 0x19
 1270 0126 03       		.uleb128 0x3
 1271 0127 0E       		.uleb128 0xe
 1272 0128 3A       		.uleb128 0x3a
 1273 0129 0B       		.uleb128 0xb
 1274 012a 3B       		.uleb128 0x3b
 1275 012b 0B       		.uleb128 0xb
 1276 012c 27       		.uleb128 0x27
 1277 012d 19       		.uleb128 0x19
 1278 012e 49       		.uleb128 0x49
 1279 012f 13       		.uleb128 0x13
 1280 0130 3C       		.uleb128 0x3c
 1281 0131 19       		.uleb128 0x19
 1282 0132 00       		.byte	0
 1283 0133 00       		.byte	0
 1284 0134 13       		.uleb128 0x13
 1285 0135 2E       		.uleb128 0x2e
 1286 0136 01       		.byte	0x1
 1287 0137 3F       		.uleb128 0x3f
 1288 0138 19       		.uleb128 0x19
 1289 0139 03       		.uleb128 0x3
 1290 013a 0E       		.uleb128 0xe
 1291 013b 3A       		.uleb128 0x3a
 1292 013c 0B       		.uleb128 0xb
 1293 013d 3B       		.uleb128 0x3b
 1294 013e 0B       		.uleb128 0xb
 1295 013f 27       		.uleb128 0x27
 1296 0140 19       		.uleb128 0x19
 1297 0141 3C       		.uleb128 0x3c
 1298 0142 19       		.uleb128 0x19
 1299 0143 00       		.byte	0
 1300 0144 00       		.byte	0
 1301 0145 14       		.uleb128 0x14
 1302 0146 05       		.uleb128 0x5
 1303 0147 00       		.byte	0
 1304 0148 49       		.uleb128 0x49
 1305 0149 13       		.uleb128 0x13
 1306 014a 00       		.byte	0
 1307 014b 00       		.byte	0
 1308 014c 00       		.byte	0
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 40


 1309              		.section	.debug_loc,"",%progbits
 1310              	.Ldebug_loc0:
 1311              	.LLST0:
 1312 0000 0A000000 		.4byte	.LVL9
 1313 0004 0E000000 		.4byte	.LVL10
 1314 0008 0100     		.2byte	0x1
 1315 000a 53       		.byte	0x53
 1316 000b 00000000 		.4byte	0
 1317 000f 00000000 		.4byte	0
 1318              	.LLST1:
 1319 0013 4A000000 		.4byte	.LVL16
 1320 0017 55000000 		.4byte	.LVL17-1
 1321 001b 0100     		.2byte	0x1
 1322 001d 50       		.byte	0x50
 1323 001e 00000000 		.4byte	0
 1324 0022 00000000 		.4byte	0
 1325              		.section	.debug_aranges,"",%progbits
 1326 0000 A4000000 		.4byte	0xa4
 1327 0004 0200     		.2byte	0x2
 1328 0006 00000000 		.4byte	.Ldebug_info0
 1329 000a 04       		.byte	0x4
 1330 000b 00       		.byte	0
 1331 000c 0000     		.2byte	0
 1332 000e 0000     		.2byte	0
 1333 0010 00000000 		.4byte	.LFB2
 1334 0014 10000000 		.4byte	.LFE2-.LFB2
 1335 0018 00000000 		.4byte	.LFB3
 1336 001c 10000000 		.4byte	.LFE3-.LFB3
 1337 0020 00000000 		.4byte	.LFB4
 1338 0024 0C000000 		.4byte	.LFE4-.LFB4
 1339 0028 00000000 		.4byte	.LFB5
 1340 002c 14000000 		.4byte	.LFE5-.LFB5
 1341 0030 00000000 		.4byte	.LFB7
 1342 0034 0C000000 		.4byte	.LFE7-.LFB7
 1343 0038 00000000 		.4byte	.LFB8
 1344 003c 0C000000 		.4byte	.LFE8-.LFB8
 1345 0040 00000000 		.4byte	.LFB9
 1346 0044 0C000000 		.4byte	.LFE9-.LFB9
 1347 0048 00000000 		.4byte	.LFB10
 1348 004c 0C000000 		.4byte	.LFE10-.LFB10
 1349 0050 00000000 		.4byte	.LFB11
 1350 0054 0C000000 		.4byte	.LFE11-.LFB11
 1351 0058 00000000 		.4byte	.LFB12
 1352 005c 0C000000 		.4byte	.LFE12-.LFB12
 1353 0060 00000000 		.4byte	.LFB13
 1354 0064 0C000000 		.4byte	.LFE13-.LFB13
 1355 0068 00000000 		.4byte	.LFB14
 1356 006c 0C000000 		.4byte	.LFE14-.LFB14
 1357 0070 00000000 		.4byte	.LFB6
 1358 0074 14000000 		.4byte	.LFE6-.LFB6
 1359 0078 00000000 		.4byte	.LFB1
 1360 007c 64000000 		.4byte	.LFE1-.LFB1
 1361 0080 00000000 		.4byte	.LFB0
 1362 0084 1C000000 		.4byte	.LFE0-.LFB0
 1363 0088 00000000 		.4byte	.LFB15
 1364 008c 0C000000 		.4byte	.LFE15-.LFB15
 1365 0090 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 41


 1366 0094 0C000000 		.4byte	.LFE16-.LFB16
 1367 0098 00000000 		.4byte	.LFB17
 1368 009c 0C000000 		.4byte	.LFE17-.LFB17
 1369 00a0 00000000 		.4byte	0
 1370 00a4 00000000 		.4byte	0
 1371              		.section	.debug_ranges,"",%progbits
 1372              	.Ldebug_ranges0:
 1373 0000 00000000 		.4byte	.LFB2
 1374 0004 10000000 		.4byte	.LFE2
 1375 0008 00000000 		.4byte	.LFB3
 1376 000c 10000000 		.4byte	.LFE3
 1377 0010 00000000 		.4byte	.LFB4
 1378 0014 0C000000 		.4byte	.LFE4
 1379 0018 00000000 		.4byte	.LFB5
 1380 001c 14000000 		.4byte	.LFE5
 1381 0020 00000000 		.4byte	.LFB7
 1382 0024 0C000000 		.4byte	.LFE7
 1383 0028 00000000 		.4byte	.LFB8
 1384 002c 0C000000 		.4byte	.LFE8
 1385 0030 00000000 		.4byte	.LFB9
 1386 0034 0C000000 		.4byte	.LFE9
 1387 0038 00000000 		.4byte	.LFB10
 1388 003c 0C000000 		.4byte	.LFE10
 1389 0040 00000000 		.4byte	.LFB11
 1390 0044 0C000000 		.4byte	.LFE11
 1391 0048 00000000 		.4byte	.LFB12
 1392 004c 0C000000 		.4byte	.LFE12
 1393 0050 00000000 		.4byte	.LFB13
 1394 0054 0C000000 		.4byte	.LFE13
 1395 0058 00000000 		.4byte	.LFB14
 1396 005c 0C000000 		.4byte	.LFE14
 1397 0060 00000000 		.4byte	.LFB6
 1398 0064 14000000 		.4byte	.LFE6
 1399 0068 00000000 		.4byte	.LFB1
 1400 006c 64000000 		.4byte	.LFE1
 1401 0070 00000000 		.4byte	.LFB0
 1402 0074 1C000000 		.4byte	.LFE0
 1403 0078 00000000 		.4byte	.LFB15
 1404 007c 0C000000 		.4byte	.LFE15
 1405 0080 00000000 		.4byte	.LFB16
 1406 0084 0C000000 		.4byte	.LFE16
 1407 0088 00000000 		.4byte	.LFB17
 1408 008c 0C000000 		.4byte	.LFE17
 1409 0090 00000000 		.4byte	0
 1410 0094 00000000 		.4byte	0
 1411              		.section	.debug_line,"",%progbits
 1412              	.Ldebug_line0:
 1413 0000 AE010000 		.section	.debug_str,"MS",%progbits,1
 1413      02005300 
 1413      00000201 
 1413      FB0E0D00 
 1413      01010101 
 1414              	.LASF15:
 1415 0000 72656731 		.ascii	"reg16\000"
 1415      3600
 1416              	.LASF32:
 1417 0006 50574D5F 		.ascii	"PWM_motor_ReadCapture\000"
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 42


 1417      6D6F746F 
 1417      725F5265 
 1417      61644361 
 1417      70747572 
 1418              	.LASF35:
 1419 001c 72657375 		.ascii	"result\000"
 1419      6C7400
 1420              	.LASF46:
 1421 0023 50574D5F 		.ascii	"PWM_motor_initVar\000"
 1421      6D6F746F 
 1421      725F696E 
 1421      69745661 
 1421      7200
 1422              	.LASF11:
 1423 0035 666C6F61 		.ascii	"float\000"
 1423      7400
 1424              	.LASF22:
 1425 003b 70657269 		.ascii	"period\000"
 1425      6F6400
 1426              	.LASF3:
 1427 0042 73686F72 		.ascii	"short unsigned int\000"
 1427      7420756E 
 1427      7369676E 
 1427      65642069 
 1427      6E7400
 1428              	.LASF43:
 1429 0055 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\PWM_motor.c\000"
 1429      6E657261 
 1429      7465645F 
 1429      536F7572 
 1429      63655C50 
 1430              	.LASF19:
 1431 007a 50574D5F 		.ascii	"PWM_motor_WriteCounter\000"
 1431      6D6F746F 
 1431      725F5772 
 1431      69746543 
 1431      6F756E74 
 1432              	.LASF28:
 1433 0091 50574D5F 		.ascii	"PWM_motor_ReadCounter\000"
 1433      6D6F746F 
 1433      725F5265 
 1433      6164436F 
 1433      756E7465 
 1434              	.LASF37:
 1435 00a7 50574D5F 		.ascii	"PWM_motor_interruptState\000"
 1435      6D6F746F 
 1435      725F696E 
 1435      74657272 
 1435      75707453 
 1436              	.LASF21:
 1437 00c0 636F756E 		.ascii	"counter\000"
 1437      74657200 
 1438              	.LASF7:
 1439 00c8 6C6F6E67 		.ascii	"long long unsigned int\000"
 1439      206C6F6E 
 1439      6720756E 
 1439      7369676E 
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 43


 1439      65642069 
 1440              	.LASF1:
 1441 00df 756E7369 		.ascii	"unsigned char\000"
 1441      676E6564 
 1441      20636861 
 1441      7200
 1442              	.LASF14:
 1443 00ed 72656738 		.ascii	"reg8\000"
 1443      00
 1444              	.LASF38:
 1445 00f2 50574D5F 		.ascii	"PWM_motor_Start\000"
 1445      6D6F746F 
 1445      725F5374 
 1445      61727400 
 1446              	.LASF5:
 1447 0102 6C6F6E67 		.ascii	"long unsigned int\000"
 1447      20756E73 
 1447      69676E65 
 1447      6420696E 
 1447      7400
 1448              	.LASF9:
 1449 0114 75696E74 		.ascii	"uint8\000"
 1449      3800
 1450              	.LASF33:
 1451 011a 50574D5F 		.ascii	"PWM_motor_ClearFIFO\000"
 1451      6D6F746F 
 1451      725F436C 
 1451      65617246 
 1451      49464F00 
 1452              	.LASF39:
 1453 012e 50574D5F 		.ascii	"PWM_motor_ReadCompare1\000"
 1453      6D6F746F 
 1453      725F5265 
 1453      6164436F 
 1453      6D706172 
 1454              	.LASF40:
 1455 0145 50574D5F 		.ascii	"PWM_motor_ReadCompare2\000"
 1455      6D6F746F 
 1455      725F5265 
 1455      6164436F 
 1455      6D706172 
 1456              	.LASF12:
 1457 015c 646F7562 		.ascii	"double\000"
 1457      6C6500
 1458              	.LASF26:
 1459 0163 50574D5F 		.ascii	"PWM_motor_SetInterruptMode\000"
 1459      6D6F746F 
 1459      725F5365 
 1459      74496E74 
 1459      65727275 
 1460              	.LASF10:
 1461 017e 75696E74 		.ascii	"uint16\000"
 1461      313600
 1462              	.LASF20:
 1463 0185 50574D5F 		.ascii	"PWM_motor_WritePeriod\000"
 1463      6D6F746F 
 1463      725F5772 
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 44


 1463      69746550 
 1463      6572696F 
 1464              	.LASF47:
 1465 019b 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1465      74657243 
 1465      72697469 
 1465      63616C53 
 1465      65637469 
 1466              	.LASF34:
 1467 01b2 50574D5F 		.ascii	"PWM_motor_Init\000"
 1467      6D6F746F 
 1467      725F496E 
 1467      697400
 1468              	.LASF8:
 1469 01c1 756E7369 		.ascii	"unsigned int\000"
 1469      676E6564 
 1469      20696E74 
 1469      00
 1470              	.LASF41:
 1471 01ce 50574D5F 		.ascii	"PWM_motor_ReadPeriod\000"
 1471      6D6F746F 
 1471      725F5265 
 1471      61645065 
 1471      72696F64 
 1472              	.LASF45:
 1473 01e3 50574D5F 		.ascii	"PWM_motor_ReadControlRegister\000"
 1473      6D6F746F 
 1473      725F5265 
 1473      6164436F 
 1473      6E74726F 
 1474              	.LASF48:
 1475 0201 43794578 		.ascii	"CyExitCriticalSection\000"
 1475      69744372 
 1475      69746963 
 1475      616C5365 
 1475      6374696F 
 1476              	.LASF23:
 1477 0217 50574D5F 		.ascii	"PWM_motor_WriteCompare1\000"
 1477      6D6F746F 
 1477      725F5772 
 1477      69746543 
 1477      6F6D7061 
 1478              	.LASF25:
 1479 022f 50574D5F 		.ascii	"PWM_motor_WriteCompare2\000"
 1479      6D6F746F 
 1479      725F5772 
 1479      69746543 
 1479      6F6D7061 
 1480              	.LASF29:
 1481 0247 50574D5F 		.ascii	"PWM_motor_ReadStatusRegister\000"
 1481      6D6F746F 
 1481      725F5265 
 1481      61645374 
 1481      61747573 
 1482              	.LASF17:
 1483 0264 50574D5F 		.ascii	"PWM_motor_Enable\000"
 1483      6D6F746F 
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 45


 1483      725F456E 
 1483      61626C65 
 1483      00
 1484              	.LASF36:
 1485 0275 6374726C 		.ascii	"ctrl\000"
 1485      00
 1486              	.LASF16:
 1487 027a 73697A65 		.ascii	"sizetype\000"
 1487      74797065 
 1487      00
 1488              	.LASF6:
 1489 0283 6C6F6E67 		.ascii	"long long int\000"
 1489      206C6F6E 
 1489      6720696E 
 1489      7400
 1490              	.LASF27:
 1491 0291 696E7465 		.ascii	"interruptMode\000"
 1491      72727570 
 1491      744D6F64 
 1491      6500
 1492              	.LASF18:
 1493 029f 50574D5F 		.ascii	"PWM_motor_Stop\000"
 1493      6D6F746F 
 1493      725F5374 
 1493      6F7000
 1494              	.LASF2:
 1495 02ae 73686F72 		.ascii	"short int\000"
 1495      7420696E 
 1495      7400
 1496              	.LASF42:
 1497 02b8 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1497      4320342E 
 1497      392E3320 
 1497      32303135 
 1497      30333033 
 1498 02eb 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1498      20726576 
 1498      6973696F 
 1498      6E203232 
 1498      31323230 
 1499 031e 67202D73 		.ascii	"g -std=gnu99 -ffunction-sections -ffat-lto-objects\000"
 1499      74643D67 
 1499      6E753939 
 1499      202D6666 
 1499      756E6374 
 1500              	.LASF31:
 1501 0351 636F6E74 		.ascii	"control\000"
 1501      726F6C00 
 1502              	.LASF4:
 1503 0359 6C6F6E67 		.ascii	"long int\000"
 1503      20696E74 
 1503      00
 1504              	.LASF13:
 1505 0362 63686172 		.ascii	"char\000"
 1505      00
 1506              	.LASF30:
 1507 0367 50574D5F 		.ascii	"PWM_motor_WriteControlRegister\000"
ARM GAS  C:\Users\satomin\AppData\Local\Temp\ccR8EcgV.s 			page 46


 1507      6D6F746F 
 1507      725F5772 
 1507      69746543 
 1507      6F6E7472 
 1508              	.LASF0:
 1509 0386 7369676E 		.ascii	"signed char\000"
 1509      65642063 
 1509      68617200 
 1510              	.LASF24:
 1511 0392 636F6D70 		.ascii	"compare\000"
 1511      61726500 
 1512              	.LASF44:
 1513 039a 433A5C55 		.ascii	"C:\\Users\\satomin\\Documents\\PSoC Creator\\AI_min"
 1513      73657273 
 1513      5C736174 
 1513      6F6D696E 
 1513      5C446F63 
 1514 03c8 695F3230 		.ascii	"i_2016_9_1\\AI_mini_main.cydsn\000"
 1514      31365F39 
 1514      5F315C41 
 1514      495F6D69 
 1514      6E695F6D 
 1515              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
